{
  "api/CSF.Extensions.WebDriver.Factories.ICreatesWebDriverFromOptions.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.ICreatesWebDriverFromOptions.html",
    "title": "Interface ICreatesWebDriverFromOptions | CSF.Extensions.WebDriver",
    "keywords": "Interface ICreatesWebDriverFromOptions Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll A service that gets an instance of OpenQA.Selenium.IWebDriver from a configuration object. public interface ICreatesWebDriverFromOptions Extension Methods WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Remarks This service could be thought of as 'a general WebDriver factory'. This allows the creation of any implementation of WebDriver from just configuration information. The purpose of this service is to make it easier to write applications (or browser-based tests) which test using a variety of WebDriver implementations (such as a variety of browsers). By using this service, the application or test need not hard-code the logic to create the WebDriver instances, they can be input from configuration data. Methods GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) Gets a WebDriver using the settings from the specified WebDriver configuration object. WebDriverAndOptions GetWebDriver(WebDriverCreationOptions options, Action<DriverOptions> supplementaryConfiguration = null) Parameters options WebDriverCreationOptions An object indicating which WebDriver implementation to use and how the WebDriver should be configured. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver instance and the OpenQA.Selenium.DriverOptions which were used to create it. Remarks The WebDriver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If options is null. ArgumentException If any of: The DriverType of the options is null or empty The OptionsFactory of the options is null The DriverType of the options is set to an implementation of OpenQA.Selenium.IWebDriver which does not expose a public constructor which takes a single parameter of type OpenQA.Selenium.DriverOptions (or a more derived type). Such WebDriver implementations will require a custom factory, indicated by DriverFactoryType The DriverFactoryType of the options is not null, but the implementation of ICreatesWebDriverFromOptions indicated by that type did not return an OpenQA.Selenium.IWebDriver instance TypeLoadException Either DriverType or DriverFactoryType of the options are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.IGetsWebDriverAndOptionsTypes.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.IGetsWebDriverAndOptionsTypes.html",
    "title": "Interface IGetsWebDriverAndOptionsTypes | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsWebDriverAndOptionsTypes Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll An object which gets the OpenQA.Selenium.IWebDriver and OpenQA.Selenium.DriverOptions types. public interface IGetsWebDriverAndOptionsTypes Methods GetWebDriverFactoryType(string) Gets the Type for an implementation of ICreatesWebDriverFromOptions, for when a third-party factory is to be used. Type GetWebDriverFactoryType(string typeName) Parameters typeName string The assembly qualified name of the factory type. Returns Type Exceptions ArgumentException If typeName is null or whitespace, or if it corresponds to a type which does not implement ICreatesWebDriverFromOptions. TypeLoadException If the type specified by typeName cannot be loaded. GetWebDriverOptionsType(Type, string) Gets the Type for an implementation of OpenQA.Selenium.DriverOptions from an optional string type name and the implementation-type of the OpenQA.Selenium.IWebDriver which will be consuming those options. Type GetWebDriverOptionsType(Type driverType, string typeName = null) Parameters driverType Type The type of OpenQA.Selenium.IWebDriver which will be consuming these options. typeName string An optional name of a type which implements OpenQA.Selenium.DriverOptions; see the remarks for more information. Returns Type A DriverOptions type. Remarks Under some circumstances, the typeName parameter may be null and the type will still be correctly determined. That is because a number of OpenQA.Selenium.IWebDriver implementation types imply a deterministic OpenQA.Selenium.DriverOptions type via their constructor signature. For such WebDriver implementation types, if the type name is omitted then the options type will be returned based upon the implied options type, which the driver type takes in its constructor. Additionally, for all concrete OpenQA.Selenium.DriverOptions implementations which are shipped with Selenium, when typeName is specified it needs only be a short type name, equivalent to Name. For third-party driver options implementations, this must be an assembly-qualified name, such that the type may be found using GetType(string). Exceptions ArgumentNullException If driverType is null. ArgumentException If typeName is specified, but does not correspond to a type which derives from OpenQA.Selenium.DriverOptions, or if typeName is null but the driverType is not a type which implies a driver options type. TypeLoadException If the type specified by typeName cannot be loaded. GetWebDriverType(string) Gets the Type for an implementation of OpenQA.Selenium.IWebDriver, from a string type name. Type GetWebDriverType(string typeName) Parameters typeName string The name of the type. Returns Type A WebDriver type. Remarks For WebDriver implementations which are shipped with Selenium, all that is required is the short name, corresponding to Name. For WebDriver implementations that are not part of the Selenium.WebDriver NuGet package, this should be an assembly-qualified type name, such that the type could be located with GetType(string). Exceptions ArgumentException If typeName is null or whitespace, or if it corresponds to a type which does not implement OpenQA.Selenium.IWebDriver. TypeLoadException If the type specified by typeName cannot be loaded."
  },
  "api/CSF.Extensions.WebDriver.Factories.IGetsWebDriverWithDeterministicOptionsTypes.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.IGetsWebDriverWithDeterministicOptionsTypes.html",
    "title": "Interface IGetsWebDriverWithDeterministicOptionsTypes | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsWebDriverWithDeterministicOptionsTypes Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll An object which can get the WebDriver implementation types which have deterministic options types. public interface IGetsWebDriverWithDeterministicOptionsTypes Methods GetWebDriverAndDeterministicOptionsTypes() Gets a collection of the implementations of OpenQA.Selenium.IWebDriver in the Selenium library which have deterministic options types. IReadOnlyCollection<WebDriverAndOptionsTypePair> GetWebDriverAndDeterministicOptionsTypes() Returns IReadOnlyCollection<WebDriverAndOptionsTypePair> A collection of web driver types and their associated options types. Remarks This method will only get concrete implementations of OpenQA.Selenium.IWebDriver for which we can reliably determine the associated/corresponding concrete implementation of OpenQA.Selenium.DriverOptions. For example, this method will not return OpenQA.Selenium.Remote.RemoteWebDriver because that takes one of many different options types. On the other hand, as of the time of writing, OpenQA.Selenium.Chrome.ChromeDriver would be included in the results, because it has a constructor which uniquely and unambiguously identifies that it requires an instance of OpenQA.Selenium.Chrome.ChromeOptions This method makes use of assembly-scanning techniques to get the list of drivers and options, so it stands at least some chance of correctly dealing with alterations in the Selenium library, such as the introduction of new WebDrivers."
  },
  "api/CSF.Extensions.WebDriver.Factories.ProxyWrappingWebDriverFactoryDecorator.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.ProxyWrappingWebDriverFactoryDecorator.html",
    "title": "Class ProxyWrappingWebDriverFactoryDecorator | CSF.Extensions.WebDriver",
    "keywords": "Class ProxyWrappingWebDriverFactoryDecorator Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Decorator for implementations of ICreatesWebDriverFromOptions which (if applicable) wraps the returned WebDriver in a proxy object, which adds further functionality. public class ProxyWrappingWebDriverFactoryDecorator : ICreatesWebDriverFromOptions Inheritance object ProxyWrappingWebDriverFactoryDecorator Implements ICreatesWebDriverFromOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Constructors ProxyWrappingWebDriverFactoryDecorator(ICreatesWebDriverFromOptions, IGetsProxyWebDriver, ILogger<ProxyWrappingWebDriverFactoryDecorator>) Initialises a new instance of ProxyWrappingWebDriverFactoryDecorator. public ProxyWrappingWebDriverFactoryDecorator(ICreatesWebDriverFromOptions wrapped, IGetsProxyWebDriver proxyFactory, ILogger<ProxyWrappingWebDriverFactoryDecorator> logger) Parameters wrapped ICreatesWebDriverFromOptions The wrapped factory proxyFactory IGetsProxyWebDriver A proxy factory implementation logger ILogger<ProxyWrappingWebDriverFactoryDecorator> A logger Exceptions ArgumentNullException If any parameter is null. Methods GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) Gets a WebDriver using the settings from the specified WebDriver configuration object. public WebDriverAndOptions GetWebDriver(WebDriverCreationOptions options, Action<DriverOptions> supplementaryConfiguration = null) Parameters options WebDriverCreationOptions An object indicating which WebDriver implementation to use and how the WebDriver should be configured. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver instance and the OpenQA.Selenium.DriverOptions which were used to create it. Remarks The WebDriver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If options is null. ArgumentException If any of: The DriverType of the options is null or empty The OptionsFactory of the options is null The DriverType of the options is set to an implementation of OpenQA.Selenium.IWebDriver which does not expose a public constructor which takes a single parameter of type OpenQA.Selenium.DriverOptions (or a more derived type). Such WebDriver implementations will require a custom factory, indicated by DriverFactoryType The DriverFactoryType of the options is not null, but the implementation of ICreatesWebDriverFromOptions indicated by that type did not return an OpenQA.Selenium.IWebDriver instance TypeLoadException Either DriverType or DriverFactoryType of the options are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.RemoteWebDriverFromOptionsFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.RemoteWebDriverFromOptionsFactory.html",
    "title": "Class RemoteWebDriverFromOptionsFactory | CSF.Extensions.WebDriver",
    "keywords": "Class RemoteWebDriverFromOptionsFactory Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Chain of responsibility implementation of ICreatesWebDriverFromOptions which creates instances of OpenQA.Selenium.Remote.RemoteWebDriver. public class RemoteWebDriverFromOptionsFactory : ICreatesWebDriverFromOptions Inheritance object RemoteWebDriverFromOptionsFactory Implements ICreatesWebDriverFromOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Constructors RemoteWebDriverFromOptionsFactory(IGetsWebDriverAndOptionsTypes, ILogger<RemoteWebDriverFromOptionsFactory>, ICreatesWebDriverFromOptions) Initialises a new instance of RemoteWebDriverFromOptionsFactory. public RemoteWebDriverFromOptionsFactory(IGetsWebDriverAndOptionsTypes typeProvider, ILogger<RemoteWebDriverFromOptionsFactory> logger, ICreatesWebDriverFromOptions next) Parameters typeProvider IGetsWebDriverAndOptionsTypes A type-providing service logger ILogger<RemoteWebDriverFromOptionsFactory> A logger next ICreatesWebDriverFromOptions The next service in the chain of responsibility. Exceptions ArgumentNullException If any parameters is null. Methods GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) Gets a WebDriver using the settings from the specified WebDriver configuration object. public WebDriverAndOptions GetWebDriver(WebDriverCreationOptions options, Action<DriverOptions> supplementaryConfiguration = null) Parameters options WebDriverCreationOptions An object indicating which WebDriver implementation to use and how the WebDriver should be configured. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver instance and the OpenQA.Selenium.DriverOptions which were used to create it. Remarks The WebDriver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If options is null. ArgumentException If any of: The DriverType of the options is null or empty The OptionsFactory of the options is null The DriverType of the options is set to an implementation of OpenQA.Selenium.IWebDriver which does not expose a public constructor which takes a single parameter of type OpenQA.Selenium.DriverOptions (or a more derived type). Such WebDriver implementations will require a custom factory, indicated by DriverFactoryType The DriverFactoryType of the options is not null, but the implementation of ICreatesWebDriverFromOptions indicated by that type did not return an OpenQA.Selenium.IWebDriver instance TypeLoadException Either DriverType or DriverFactoryType of the options are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.SeleniumDriverAndOptionsScanner.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.SeleniumDriverAndOptionsScanner.html",
    "title": "Class SeleniumDriverAndOptionsScanner | CSF.Extensions.WebDriver",
    "keywords": "Class SeleniumDriverAndOptionsScanner Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Service which scans the Selenium WebDriver assembly for web driver types. public class SeleniumDriverAndOptionsScanner : IGetsWebDriverWithDeterministicOptionsTypes Inheritance object SeleniumDriverAndOptionsScanner Implements IGetsWebDriverWithDeterministicOptionsTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetWebDriverAndDeterministicOptionsTypes() Gets a collection of the implementations of OpenQA.Selenium.IWebDriver in the Selenium library which have deterministic options types. public IReadOnlyCollection<WebDriverAndOptionsTypePair> GetWebDriverAndDeterministicOptionsTypes() Returns IReadOnlyCollection<WebDriverAndOptionsTypePair> A collection of web driver types and their associated options types. Remarks This method will only get concrete implementations of OpenQA.Selenium.IWebDriver for which we can reliably determine the associated/corresponding concrete implementation of OpenQA.Selenium.DriverOptions. For example, this method will not return OpenQA.Selenium.Remote.RemoteWebDriver because that takes one of many different options types. On the other hand, as of the time of writing, OpenQA.Selenium.Chrome.ChromeDriver would be included in the results, because it has a constructor which uniquely and unambiguously identifies that it requires an instance of OpenQA.Selenium.Chrome.ChromeOptions This method makes use of assembly-scanning techniques to get the list of drivers and options, so it stands at least some chance of correctly dealing with alterations in the Selenium library, such as the introduction of new WebDrivers."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverAndOptions.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverAndOptions.html",
    "title": "Class WebDriverAndOptions | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverAndOptions Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll A model containing a WebDriver and the DriverOptions which were used to create it. public class WebDriverAndOptions Inheritance object WebDriverAndOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebDriverAndOptions(IWebDriver, DriverOptions) Initialises a new instance of WebDriverAndOptions. public WebDriverAndOptions(IWebDriver webDriver, DriverOptions driverOptions) Parameters webDriver IWebDriver The WebDriver. driverOptions DriverOptions The options which were used to create webDriver. Exceptions ArgumentNullException If either parameter is null. Properties DriverOptions Gets the DriverOptions which were used to create the WebDriver public DriverOptions DriverOptions { get; } Property Value DriverOptions WebDriver Gets the WebDriver public IWebDriver WebDriver { get; } Property Value IWebDriver"
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverAndOptionsTypePair.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverAndOptionsTypePair.html",
    "title": "Class WebDriverAndOptionsTypePair | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverAndOptionsTypePair Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll A tuple of Type, one a concrete implementation of OpenQA.Selenium.IWebDriver, the other the implementation of OpenQA.Selenium.DriverOptions which that web driver type uses. public sealed class WebDriverAndOptionsTypePair : IEquatable<WebDriverAndOptionsTypePair> Inheritance object WebDriverAndOptionsTypePair Implements IEquatable<WebDriverAndOptionsTypePair> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors WebDriverAndOptionsTypePair(Type, Type) Initialises a new instance of WebDriverAndOptionsTypePair. public WebDriverAndOptionsTypePair(Type webDriverType, Type optionsType) Parameters webDriverType Type The web driver type optionsType Type The options type Exceptions ArgumentNullException If either parameter is null. Properties OptionsType Gets the options type. public Type OptionsType { get; } Property Value Type WebDriverType Gets the web driver type. public Type WebDriverType { get; } Property Value Type Methods Equals(WebDriverAndOptionsTypePair) public bool Equals(WebDriverAndOptionsTypePair other) Parameters other WebDriverAndOptionsTypePair Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationConfigureOptions.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationConfigureOptions.html",
    "title": "Class WebDriverCreationConfigureOptions | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverCreationConfigureOptions Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll A service which configures an IOptions<TOptions> of WebDriverCreationOptionsCollection within dependency injection. public sealed class WebDriverCreationConfigureOptions : IConfigureOptions<WebDriverCreationOptionsCollection> Inheritance object WebDriverCreationConfigureOptions Implements IConfigureOptions<WebDriverCreationOptionsCollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks By design, the Configure(WebDriverCreationOptionsCollection) method of this class will avoid throwing exceptions. Instead, if the configuration is unsuitable or not valid then this class will log an error and omit the troublesome driver configuration. Constructors WebDriverCreationConfigureOptions(IGetsWebDriverAndOptionsTypes, IConfiguration, ILogger<WebDriverCreationConfigureOptions>) Initialises a new instance of WebDriverCreationConfigureOptions. public WebDriverCreationConfigureOptions(IGetsWebDriverAndOptionsTypes typeProvider, IConfiguration configuration, ILogger<WebDriverCreationConfigureOptions> logger) Parameters typeProvider IGetsWebDriverAndOptionsTypes A type-loading utility class. configuration IConfiguration The app configuration. logger ILogger<WebDriverCreationConfigureOptions> A logging implementation. Exceptions ArgumentNullException If either parameter is null. Methods Configure(WebDriverCreationOptionsCollection) Invoked to configure a WebDriverCreationOptionsCollection instance. public void Configure(WebDriverCreationOptionsCollection options) Parameters options WebDriverCreationOptionsCollection The options instance to configure."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationOptions.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationOptions.html",
    "title": "Class WebDriverCreationOptions | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverCreationOptions Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Describes the implementation and options for the creation of a web driver. public class WebDriverCreationOptions Inheritance object WebDriverCreationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks For most local WebDriver scenarios, the only mandatory properties for this object are DriverType and OptionsFactory. For remote WebDrivers, the OptionsType property is mandatory and the GridUrl property is recommended. Properties AddBrowserIdentification Gets a value which indicates whether or not the created WebDriver should be enriched with browser identification functionality. public bool AddBrowserIdentification { get; set; } Property Value bool Remarks If this property is set to true (which is the default if left unset) then the implementation of OpenQA.Selenium.IWebDriver returned by a factory which uses this object as a parameter will be enriched and will implement IHasBrowserId in addition to its usual interfaces. This functionality, if enabled, will mean that the WebDriver returned by the factory will be a proxy object and not the original WebDriver implementation. For more information on proxies created by this library and their implications, see IGetsProxyWebDriver. AddBrowserQuirks Gets a value which indicates whether or not the created WebDriver should be enriched with browser quirks functionality. public bool AddBrowserQuirks { get; set; } Property Value bool Remarks For more information about this functionality, please see the documentation for IHasQuirks This functionality, if enabled, will mean that the WebDriver returned by the factory will be a proxy object and not the original WebDriver implementation. For more information on proxies created by this library and their implications, see IGetsProxyWebDriver. If this property is true then the value of AddBrowserIdentification is irrelevant; browser identification will always be added to the proxy when quirks are added. DriverFactoryType Unneeded except in unusual circumstances, gets or sets the name of a type which is used to construct the WebDriver instance. public string DriverFactoryType { get; set; } Property Value string Remarks This property is unneeded and should be set to null in almost all circumstances. For all WebDriver implementations bundled with Selenium and most expected third party implementations, this library can automatically instantiate them without additional logic. This library can correctly instantiate all WebDrivers that are included with the Selenium.WebDriver NuGet package. This library can also automatically instantiate any third-party WebDriver implementation so long as it has a public constructor which takes a single parameter, which is of a type that derives from OpenQA.Selenium.DriverOptions. If DriverType is set to a third-party WebDriver implementation which does not follow the pattern above, such as one which has a different constructor parameter signature, this library requires some help in instantiating the WebDriver. In that case (only), this property should be set to the assembly-qualified type name of a type which implements ICreatesWebDriverFromOptions. That type must be provided by the developer using this library. The factory is responsible for constructing the WebDriver instance from options and returning it. When using a factory of this kind, the factory class which implements ICreatesWebDriverFromOptions must either: Be available through dependency injection; add it to your service collection Have a public parameterless constructor, such that it may be created via CreateInstance(Type) See Also DriverType ICreatesWebDriverFromOptions DriverType Gets or sets a value indicating the concrete Type name of the class which should be used as the OpenQA.Selenium.IWebDriver implementation. public string DriverType { get; set; } Property Value string Examples To use the Google Chrome implementation of OpenQA.Selenium.IWebDriver, shipped with Selenium, this property should be set to the value ChromeDriver. To use a (fictitious) WebDriver named ElephantDriver, from an assembly named PachydermWeb.ElephantBrowser, which has the same namespace, then this property value should be set to PachydermWeb.ElephantBrowser.ElephantDriver, PachydermWeb.ElephantBrowser. Remarks This property value is mandatory on all instances of web driver configuration. The type indicated here must derive from OpenQA.Selenium.IWebDriver. For WebDriver implementations which are shipped with Selenium, all that is required is the simple type name. For WebDriver implementations that are not part of the Selenium.WebDriver NuGet package, this should be an assembly-qualified type name, such that the type could be located with GetType(string). When this value is either RemoteWebDriver, or when it is set to a WebDriver which is not part of the Selenium.WebDriver NuGet package, then OptionsType must also be set. For local drivers which are shipped with Selenium, explicitly setting the options type is not neccesary; this library will automatically select the appropriate type. See Also OptionsType GridUrl Applicable to remote web drivers only, gets or sets the URL at which the Selenium Grid is hosted. public string GridUrl { get; set; } Property Value string Remarks The value of this property is unused and irrelevant if DriverType is not set to RemoteWebDriver. When using a remote web driver, it is usually required to set this property value. The only time a value is not required is if your Selenium Grid configuration is occupying the default URL, which is unlikely in a production configuration. OptionsFactory Gets or sets a factory object which can create instances of WebDriver options, to be provided to the WebDriver implementation. public Func<DriverOptions> OptionsFactory { get; set; } Property Value Func<DriverOptions> Remarks The return value of this function must be an object of an appropriate type to match the implementation of OpenQA.Selenium.IWebDriver that is selected, via DriverType. When deserializing this value from configuration (such as an appsettings.json file), the OptionsType will be used to select the appropriate polymorphic type to which the configuration should be bound. For local WebDriver implementations which are shipped with Selenium, the options type need not be specified explicitly; it will be inferred from the chosen driver type. This option is provided as a factory, rather than an instance of OpenQA.Selenium.DriverOptions because it will create options instances for - potentially - many usages throughout the application/test lifetime. It is a poor design choice to use a single options instance for every one of the WebDriver instances which will be used. In some cases, this would cause functional issues, such as where additional per-scenario capabilities need to be injected into each options instance. Please note that when using Microsoft.Extensions.Configuration to bind an instance of this type, this factory function is bound from an IConfiguration key named Options and not OptionsFactory as its member name might suggest. OptionsType Gets or sets a value indicating the concrete Type of the options object which should be provded to the WebDriver when the driver is created. public string OptionsType { get; set; } Property Value string Remarks This value only needs to be provided in two scenarios: When the DriverType is set to RemoteWebDriver When the DriverType is set to a driver implementation which is not shipped with Selenium in the Selenium.WebDriver NuGet package For local WebDriver implementations which are shipped with Selenium, this library will automatically select and use the appropriate options type if this property is null. In a similar manner to DriverType, if See Also DriverType"
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationOptionsCollection.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverCreationOptionsCollection.html",
    "title": "Class WebDriverCreationOptionsCollection | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverCreationOptionsCollection Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Describes a collection of configurations which may be used with ICreatesWebDriverFromOptions to get a WebDriver. public class WebDriverCreationOptionsCollection Inheritance object WebDriverCreationOptionsCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This object additionally has a property that indicates which of those configurations is 'currently selected': SelectedConfiguration. This enables techniques in which many WebDriver configurations are available, such as in an appsettings.json file and a parameter is used to choose between them by name. Such a value might be provided via a command-line argument, for example. Properties DriverConfigurations Gets or sets a name/value collection of WebDriverCreationOptions instances, containing all of the WebDriver configurations which are available. public IDictionary<string, WebDriverCreationOptions> DriverConfigurations { get; set; } Property Value IDictionary<string, WebDriverCreationOptions> SelectedConfiguration Gets or sets the key of a WebDriver configuration which is currently selected. public string SelectedConfiguration { get; set; } Property Value string Remarks When set, this value must correspond to a key of the collection DriverConfigurations. If appropriately set, then the current WebDriverCreationOptionsCollection instance may be used as the parameter to GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) in order to get a WebDriver from the currently selected configuration. Methods GetSelectedConfiguration() Gets the WebDriverCreationOptions from the DriverConfigurations which is considered 'currently selected'. public WebDriverCreationOptions GetSelectedConfiguration() Returns WebDriverCreationOptions A WebDriverCreationOptions, or a null reference if both SelectedConfiguration is null or an empty string and there is not precisely one configuration within DriverConfigurations. Remarks There are two ways in which an item in DriverConfigurations can be the currently-selected one: The SelectedConfiguration is non-null and not an empty string. The driver configuration with a key matching the name of the selected configuration is the currently selected one. If SelectedConfiguration is null or empty but there is precisely one item present within DriverConfigurations; that single configuration is considered to be currently selected. Exceptions InvalidOperationException If SelectedConfiguration is not null or empty, but there is no item within DriverConfigurations with a key matching the selected configuration."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverFactoryExtensions.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverFactoryExtensions.html",
    "title": "Class WebDriverFactoryExtensions | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverFactoryExtensions Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Extension methods for ICreatesWebDriverFromOptions. public static class WebDriverFactoryExtensions Inheritance object WebDriverFactoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) Gets a WebDriver using the selected entry of a web drivers configuration. public static WebDriverAndOptions GetWebDriver(this ICreatesWebDriverFromOptions factory, WebDriverCreationOptionsCollection configuration, Action<DriverOptions> supplementaryConfiguration = null) Parameters factory ICreatesWebDriverFromOptions The WebDriver factory. configuration WebDriverCreationOptionsCollection An object which contains one or more WebDriver configurations as well as a value indicating which of those configurations is currently selected. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks The WebDriverCreationOptionsCollection instance must have a non-null/non-empty SelectedConfiguration and there must be an entry in DriverConfigurations of the same name as that selected configuration. That is the configuration instance which is treated as the \"selected driver configuration\". It will be passed to GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) and the result returned from this method. The selected driver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If either parameter is null. ArgumentException If any of: The configuration has a null or empty SelectedConfiguration The configuration has no entry within DriverConfigurations with a key matching the SelectedConfiguration The selected DriverConfigurations entry is null The DriverType of the selected DriverConfigurations is null or empty The OptionsFactory of the selected DriverConfigurations is null The DriverType of the selected DriverConfigurations is set to RemoteWebDriver or to a type that is not shipped with Selenium but the OptionsType is null or empty TypeLoadException Either DriverType or OptionsType of the selected DriverConfigurations are non-null/non-empty but no type can be found matching the specifed values. GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Gets a WebDriver using specified named WebDriver configuration. public static WebDriverAndOptions GetWebDriver(this ICreatesWebDriverFromOptions factory, WebDriverCreationOptionsCollection configuration, string driverConfigName, Action<DriverOptions> supplementaryConfiguration = null) Parameters factory ICreatesWebDriverFromOptions The WebDriver factory. configuration WebDriverCreationOptionsCollection An object which contains one or more WebDriver configurations. driverConfigName string A string indicating the key of DriverConfigurations will be used to get a WebDriverCreationOptions for creating the driver. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks There must be an entry in DriverConfigurations of the same name as driverConfigName. It will be passed to GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) and the result returned from this method. The selected driver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If either parameter is null. ArgumentException If any of: driverConfigName does not match any key of DriverConfigurations for configuration. The selected DriverConfigurations entry is null The DriverType of the selected DriverConfigurations is null or empty The OptionsFactory of the selected DriverConfigurations is null The DriverType of the selected DriverConfigurations is set to RemoteWebDriver or to a type that is not shipped with Selenium but the OptionsType is null or empty TypeLoadException Either DriverType or OptionsType of the selected DriverConfigurations are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverFromOptionsFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverFromOptionsFactory.html",
    "title": "Class WebDriverFromOptionsFactory | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverFromOptionsFactory Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Factory service which creates implementations of OpenQA.Selenium.IWebDriver from WebDriverCreationOptions. public class WebDriverFromOptionsFactory : ICreatesWebDriverFromOptions Inheritance object WebDriverFromOptionsFactory Implements ICreatesWebDriverFromOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Constructors WebDriverFromOptionsFactory(IGetsWebDriverAndOptionsTypes, ILogger<WebDriverFromOptionsFactory>) Initialises a new instance of WebDriverFromOptionsFactory. public WebDriverFromOptionsFactory(IGetsWebDriverAndOptionsTypes typeProvider, ILogger<WebDriverFromOptionsFactory> logger) Parameters typeProvider IGetsWebDriverAndOptionsTypes A type provider logger ILogger<WebDriverFromOptionsFactory> A logger Exceptions ArgumentNullException If any parameter is null. Methods GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) Gets a WebDriver using the settings from the specified WebDriver configuration object. public WebDriverAndOptions GetWebDriver(WebDriverCreationOptions options, Action<DriverOptions> supplementaryConfiguration = null) Parameters options WebDriverCreationOptions An object indicating which WebDriver implementation to use and how the WebDriver should be configured. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver instance and the OpenQA.Selenium.DriverOptions which were used to create it. Remarks The WebDriver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If options is null. ArgumentException If any of: The DriverType of the options is null or empty The OptionsFactory of the options is null The DriverType of the options is set to an implementation of OpenQA.Selenium.IWebDriver which does not expose a public constructor which takes a single parameter of type OpenQA.Selenium.DriverOptions (or a more derived type). Such WebDriver implementations will require a custom factory, indicated by DriverFactoryType The DriverFactoryType of the options is not null, but the implementation of ICreatesWebDriverFromOptions indicated by that type did not return an OpenQA.Selenium.IWebDriver instance TypeLoadException Either DriverType or DriverFactoryType of the options are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverFromThirdPartyFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverFromThirdPartyFactory.html",
    "title": "Class WebDriverFromThirdPartyFactory | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverFromThirdPartyFactory Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Chain of responsibility implementation of ICreatesWebDriverFromOptions which creates WebDriver instances using a third-party factory type, specified in DriverFactoryType. public class WebDriverFromThirdPartyFactory : ICreatesWebDriverFromOptions Inheritance object WebDriverFromThirdPartyFactory Implements ICreatesWebDriverFromOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, Action<DriverOptions>) WebDriverFactoryExtensions.GetWebDriver(ICreatesWebDriverFromOptions, WebDriverCreationOptionsCollection, string, Action<DriverOptions>) Constructors WebDriverFromThirdPartyFactory(ICreatesWebDriverFromOptions, IGetsWebDriverAndOptionsTypes, IServiceProvider, ILogger<WebDriverFromThirdPartyFactory>) Initialises a new instance of WebDriverFromThirdPartyFactory. public WebDriverFromThirdPartyFactory(ICreatesWebDriverFromOptions next, IGetsWebDriverAndOptionsTypes typeProvider, IServiceProvider services, ILogger<WebDriverFromThirdPartyFactory> logger) Parameters next ICreatesWebDriverFromOptions The next implementation in the chain of responsibility. typeProvider IGetsWebDriverAndOptionsTypes A type-providing service. services IServiceProvider The DI service provider. logger ILogger<WebDriverFromThirdPartyFactory> A logger Exceptions ArgumentNullException If any parameter is null. Methods GetWebDriver(WebDriverCreationOptions, Action<DriverOptions>) Gets a WebDriver using the settings from the specified WebDriver configuration object. public WebDriverAndOptions GetWebDriver(WebDriverCreationOptions options, Action<DriverOptions> supplementaryConfiguration = null) Parameters options WebDriverCreationOptions An object indicating which WebDriver implementation to use and how the WebDriver should be configured. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver instance and the OpenQA.Selenium.DriverOptions which were used to create it. Remarks The WebDriver configuration object specifies both the OpenQA.Selenium.IWebDriver implementation type to use as well as any relevant options for that WebDriver. Exceptions ArgumentNullException If options is null. ArgumentException If any of: The DriverType of the options is null or empty The OptionsFactory of the options is null The DriverType of the options is set to an implementation of OpenQA.Selenium.IWebDriver which does not expose a public constructor which takes a single parameter of type OpenQA.Selenium.DriverOptions (or a more derived type). Such WebDriver implementations will require a custom factory, indicated by DriverFactoryType The DriverFactoryType of the options is not null, but the implementation of ICreatesWebDriverFromOptions indicated by that type did not return an OpenQA.Selenium.IWebDriver instance TypeLoadException Either DriverType or DriverFactoryType of the options are non-null/non-empty but no type can be found matching the specifed values."
  },
  "api/CSF.Extensions.WebDriver.Factories.WebDriverTypesProvider.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.WebDriverTypesProvider.html",
    "title": "Class WebDriverTypesProvider | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverTypesProvider Namespace CSF.Extensions.WebDriver.Factories Assembly CSF.Extensions.WebDriver.dll Provide type for OpenQA.Selenium.IWebDriver and OpenQA.Selenium.DriverOptions types. public class WebDriverTypesProvider : IGetsWebDriverAndOptionsTypes Inheritance object WebDriverTypesProvider Implements IGetsWebDriverAndOptionsTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Instances of this type perform internal caching, to avoid repeatedly re-using the computationally-expensive functionality of IGetsWebDriverWithDeterministicOptionsTypes. This should be safe under almost all circumstances, unless dynamic assembly unload/reload occurs. Constructors WebDriverTypesProvider(IGetsWebDriverWithDeterministicOptionsTypes) Initialises a new instance of WebDriverTypesProvider. public WebDriverTypesProvider(IGetsWebDriverWithDeterministicOptionsTypes deterministicWebDriverTypesScanner) Parameters deterministicWebDriverTypesScanner IGetsWebDriverWithDeterministicOptionsTypes A scanner for the WebDriver types which imply a deterministic options type. Exceptions ArgumentNullException If deterministicWebDriverTypesScanner is null. Methods GetWebDriverFactoryType(string) Gets the Type for an implementation of ICreatesWebDriverFromOptions, for when a third-party factory is to be used. public Type GetWebDriverFactoryType(string typeName) Parameters typeName string The assembly qualified name of the factory type. Returns Type Exceptions ArgumentException If typeName is null or whitespace, or if it corresponds to a type which does not implement ICreatesWebDriverFromOptions. TypeLoadException If the type specified by typeName cannot be loaded. GetWebDriverOptionsType(Type, string) Gets the Type for an implementation of OpenQA.Selenium.DriverOptions from an optional string type name and the implementation-type of the OpenQA.Selenium.IWebDriver which will be consuming those options. public Type GetWebDriverOptionsType(Type driverType, string typeName = null) Parameters driverType Type The type of OpenQA.Selenium.IWebDriver which will be consuming these options. typeName string An optional name of a type which implements OpenQA.Selenium.DriverOptions; see the remarks for more information. Returns Type A DriverOptions type. Remarks Under some circumstances, the typeName parameter may be null and the type will still be correctly determined. That is because a number of OpenQA.Selenium.IWebDriver implementation types imply a deterministic OpenQA.Selenium.DriverOptions type via their constructor signature. For such WebDriver implementation types, if the type name is omitted then the options type will be returned based upon the implied options type, which the driver type takes in its constructor. Additionally, for all concrete OpenQA.Selenium.DriverOptions implementations which are shipped with Selenium, when typeName is specified it needs only be a short type name, equivalent to Name. For third-party driver options implementations, this must be an assembly-qualified name, such that the type may be found using GetType(string). Exceptions ArgumentNullException If driverType is null. ArgumentException If typeName is specified, but does not correspond to a type which derives from OpenQA.Selenium.DriverOptions, or if typeName is null but the driverType is not a type which implies a driver options type. TypeLoadException If the type specified by typeName cannot be loaded. GetWebDriverType(string) Gets the Type for an implementation of OpenQA.Selenium.IWebDriver, from a string type name. public Type GetWebDriverType(string typeName) Parameters typeName string The name of the type. Returns Type A WebDriver type. Remarks For WebDriver implementations which are shipped with Selenium, all that is required is the short name, corresponding to Name. For WebDriver implementations that are not part of the Selenium.WebDriver NuGet package, this should be an assembly-qualified type name, such that the type could be located with GetType(string). Exceptions ArgumentException If typeName is null or whitespace, or if it corresponds to a type which does not implement OpenQA.Selenium.IWebDriver. TypeLoadException If the type specified by typeName cannot be loaded."
  },
  "api/CSF.Extensions.WebDriver.Factories.html": {
    "href": "api/CSF.Extensions.WebDriver.Factories.html",
    "title": "Namespace CSF.Extensions.WebDriver.Factories | CSF.Extensions.WebDriver",
    "keywords": "Namespace CSF.Extensions.WebDriver.Factories Classes ProxyWrappingWebDriverFactoryDecorator Decorator for implementations of ICreatesWebDriverFromOptions which (if applicable) wraps the returned WebDriver in a proxy object, which adds further functionality. RemoteWebDriverFromOptionsFactory Chain of responsibility implementation of ICreatesWebDriverFromOptions which creates instances of OpenQA.Selenium.Remote.RemoteWebDriver. SeleniumDriverAndOptionsScanner Service which scans the Selenium WebDriver assembly for web driver types. WebDriverAndOptions A model containing a WebDriver and the DriverOptions which were used to create it. WebDriverAndOptionsTypePair A tuple of Type, one a concrete implementation of OpenQA.Selenium.IWebDriver, the other the implementation of OpenQA.Selenium.DriverOptions which that web driver type uses. WebDriverCreationConfigureOptions A service which configures an IOptions<TOptions> of WebDriverCreationOptionsCollection within dependency injection. WebDriverCreationOptions Describes the implementation and options for the creation of a web driver. WebDriverCreationOptionsCollection Describes a collection of configurations which may be used with ICreatesWebDriverFromOptions to get a WebDriver. WebDriverFactoryExtensions Extension methods for ICreatesWebDriverFromOptions. WebDriverFromOptionsFactory Factory service which creates implementations of OpenQA.Selenium.IWebDriver from WebDriverCreationOptions. WebDriverFromThirdPartyFactory Chain of responsibility implementation of ICreatesWebDriverFromOptions which creates WebDriver instances using a third-party factory type, specified in DriverFactoryType. WebDriverTypesProvider Provide type for OpenQA.Selenium.IWebDriver and OpenQA.Selenium.DriverOptions types. Interfaces ICreatesWebDriverFromOptions A service that gets an instance of OpenQA.Selenium.IWebDriver from a configuration object. IGetsWebDriverAndOptionsTypes An object which gets the OpenQA.Selenium.IWebDriver and OpenQA.Selenium.DriverOptions types. IGetsWebDriverWithDeterministicOptionsTypes An object which can get the WebDriver implementation types which have deterministic options types."
  },
  "api/CSF.Extensions.WebDriver.IGetsWebDriver.html": {
    "href": "api/CSF.Extensions.WebDriver.IGetsWebDriver.html",
    "title": "Interface IGetsWebDriver | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsWebDriver Namespace CSF.Extensions.WebDriver Assembly CSF.Extensions.WebDriver.dll An object which can get an OpenQA.Selenium.IWebDriver from the options available in the application. public interface IGetsWebDriver Remarks This integrates with the Microsoft-recommended Options Pattern: https://learn.microsoft.com/en-us/dotnet/core/extensions/options. The default implementation of this interface will make use of IOptions<TOptions> of WebDriverCreationOptionsCollection which provides a 'universal configuration' mechanism for WebDriver creation options. Methods GetDefaultWebDriver(Action<DriverOptions>) Gets an OpenQA.Selenium.IWebDriver using the driver configuration indicated by the SelectedConfiguration. WebDriverAndOptions GetDefaultWebDriver(Action<DriverOptions> supplementaryConfiguration = null) Parameters supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks The supplementaryConfiguration can be useful for customising the WebDriver options in a manner specific to a single WebDriver. For example some remote WebDriver providers offer a facility to 'tag' the WebDriver with a current test/scenario name. This is done by adding additional options to the DriverOptions, specific to that scenario. GetWebDriver(string, Action<DriverOptions>) Gets an OpenQA.Selenium.IWebDriver using the named driver configuration. WebDriverAndOptions GetWebDriver(string configurationName, Action<DriverOptions> supplementaryConfiguration = null) Parameters configurationName string The driver configuration name. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks The configurationName must correspond to a key within the DriverConfigurations collection. The supplementaryConfiguration can be useful for customising the WebDriver options in a manner specific to a single WebDriver. For example some remote WebDriver providers offer a facility to 'tag' the WebDriver with a current test/scenario name. This is done by adding additional options to the DriverOptions, specific to that scenario."
  },
  "api/CSF.Extensions.WebDriver.Identification.BrowserId.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.BrowserId.html",
    "title": "Class BrowserId | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserId Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll A model which represents a combination of browser, OS platform and the browser version. public sealed class BrowserId : IEquatable<BrowserId> Inheritance object BrowserId Implements IEquatable<BrowserId> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BrowserId(string, string, BrowserVersion) Initialises a new instance of BrowserId. public BrowserId(string name, string platform, BrowserVersion version) Parameters name string The browser name platform string The browser platform version BrowserVersion The browser version Exceptions ArgumentException If either name or platform is null or an empty string. ArgumentNullException If version is null. Properties Name Gets the browser name. public string Name { get; } Property Value string Platform Gets the operating system platform upon which the browser is running. public string Platform { get; } Property Value string Version Gets a model which represents the browser's version. public BrowserVersion Version { get; } Property Value BrowserVersion Methods Equals(BrowserId) public bool Equals(BrowserId other) Parameters other BrowserId Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(BrowserId, object) Gets a value indicating whether or not the browser ID equals the specified object. public static bool operator ==(BrowserId id, object other) Parameters id BrowserId A browser ID other object Another object Returns bool true if the browser ID and the object are equal; false if not. operator !=(BrowserId, object) Gets a value indicating whether or not the browser ID is not equal to the specified object. public static bool operator !=(BrowserId id, object other) Parameters id BrowserId A browser ID other object Another object Returns bool true if the browser ID and the object are not equal; false if they are."
  },
  "api/CSF.Extensions.WebDriver.Identification.BrowserIdFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.BrowserIdFactory.html",
    "title": "Class BrowserIdFactory | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserIdFactory Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Default implementation of IGetsBrowserIdFromWebDriver. public class BrowserIdFactory : IGetsBrowserIdFromWebDriver Inheritance object BrowserIdFactory Implements IGetsBrowserIdFromWebDriver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBrowserId(IWebDriver, DriverOptions) Gets a BrowserId from the specified OpenQA.Selenium.IWebDriver and the options object with which it was created. public BrowserId GetBrowserId(IWebDriver driver, DriverOptions creationOptions) Parameters driver IWebDriver The WebDriver creationOptions DriverOptions The driver options with which the driver was created Returns BrowserId A BrowserId Exceptions ArgumentNullException If driver is null."
  },
  "api/CSF.Extensions.WebDriver.Identification.BrowserInfoMatcher.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.BrowserInfoMatcher.html",
    "title": "Class BrowserInfoMatcher | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserInfoMatcher Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Default implementation of IGetsBrowserInfoMatch. public class BrowserInfoMatcher : IGetsBrowserInfoMatch Inheritance object BrowserInfoMatcher Implements IGetsBrowserInfoMatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Matches(BrowserId, BrowserInfo) Gets a value indicating whether or not the specified browserId is a match for the specified browserInfo or not. public bool Matches(BrowserId browserId, BrowserInfo browserInfo) Parameters browserId BrowserId A browser ID browserInfo BrowserInfo A browser info object Returns bool true if the browser ID matches the browser info; false if not. Exceptions ArgumentNullException If any parameter is null. ArgumentException If browserInfo has a null or empty Name."
  },
  "api/CSF.Extensions.WebDriver.Identification.BrowserVersion.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.BrowserVersion.html",
    "title": "Class BrowserVersion | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserVersion Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Base class for a model which describes a WebDriver browser version. public abstract class BrowserVersion : IEquatable<BrowserVersion>, IComparable<BrowserVersion> Inheritance object BrowserVersion Implements IEquatable<BrowserVersion> IComparable<BrowserVersion> Derived DottedNumericBrowserVersion MissingBrowserVersion SemanticBrowserVersion UnrecognisedBrowserVersion Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Browser version instances are comparable and overload the <, >, <= & >= operators. It is easy to quickly compare version instances as if they were numbers. Concrete implementations of BrowserVersion implement the correct rules of commonly-used version numbering systems, including Semantic Versioning, which will correctly parse the version numbers of most common browsers. Constructors BrowserVersion(bool) Initialises a new instance of BrowserVersion. protected BrowserVersion(bool isPresumed = false) Parameters isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion. Properties IsPresumedVersion Gets a value indicating whether or not the current instance represents a presumed version or not. public bool IsPresumedVersion { get; } Property Value bool Remarks When this property is true, this indicates that we are not sure that the version reported by the current BrowserVersion is accurate. This can be the case when the WebDriver implementation does not report-back its version correctly. A presumed version is created by using the information from the original WebDriver request (based upon the options used to create the driver). It means \"We asked for version X, so we presume that it is version X\". Of course, across the many scenarios possible, this might not always be correct. PresumedSuffix Gets a suffix for derived types' versions which indicates whether or not IsPresumedVersion is true or not. protected string PresumedSuffix { get; } Property Value string Methods CompareTo(BrowserVersion) public abstract int CompareTo(BrowserVersion other) Parameters other BrowserVersion Returns int Create(string, string) Creates a new instance of BrowserVersion from the specified version received from a WebDriver and the version which was requested via the driver options. public static BrowserVersion Create(string version, string requestedVersion = null) Parameters version string A browser version string received from a WebDriver requestedVersion string An optional browser version string which was 'requested' by inclusion in the WebDriver's creation options. Returns BrowserVersion An implementation of BrowserVersion Remarks This method attempts to find the 'best' implementation of BrowserVersion available. It will try SemanticBrowserVersion and then DottedNumericBrowserVersion for both the version and then requestedVersion before it attempts UnrecognisedBrowserVersion with either. Equals(BrowserVersion) public abstract bool Equals(BrowserVersion other) Parameters other BrowserVersion Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override abstract int GetHashCode() Returns int Operators operator ==(BrowserVersion, object) Gets a value indicating whether or not the browser version is equal to the specified object. public static bool operator ==(BrowserVersion version, object other) Parameters version BrowserVersion A browser version other object Another object Returns bool true if the version is equal to the object; false if not. operator >(BrowserVersion, BrowserVersion) Gets a value indicating whether or not one browser version is greater than the other. public static bool operator >(BrowserVersion first, BrowserVersion second) Parameters first BrowserVersion A browser version second BrowserVersion A browser version Returns bool true if the first version is greater than the second; false otherwise. Remarks If either parameter is null then this operator will return false. operator >=(BrowserVersion, BrowserVersion) Gets a value indicating whether or not one browser version is greater than or equal to the other. public static bool operator >=(BrowserVersion first, BrowserVersion second) Parameters first BrowserVersion A browser version second BrowserVersion A browser version Returns bool true if the first version is greater than or equal to the second; false otherwise. Remarks If either parameter is null then this operator will return false. operator !=(BrowserVersion, object) Gets a value indicating whether or not the browser version is not equal to the specified object. public static bool operator !=(BrowserVersion version, object other) Parameters version BrowserVersion A browser version other object Another object Returns bool true if the version is not equal to the object; false if it is. operator <(BrowserVersion, BrowserVersion) Gets a value indicating whether or not one browser version is less than the other. public static bool operator <(BrowserVersion first, BrowserVersion second) Parameters first BrowserVersion A browser version second BrowserVersion A browser version Returns bool true if the first version is less than the second; false otherwise. Remarks If either parameter is null then this operator will return false. operator <=(BrowserVersion, BrowserVersion) Gets a value indicating whether or not one browser version is less than or equal to the other. public static bool operator <=(BrowserVersion first, BrowserVersion second) Parameters first BrowserVersion A browser version second BrowserVersion A browser version Returns bool true if the first version is less than or equal to the second; false otherwise. Remarks If either parameter is null then this operator will return false."
  },
  "api/CSF.Extensions.WebDriver.Identification.DottedNumericBrowserVersion.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.DottedNumericBrowserVersion.html",
    "title": "Class DottedNumericBrowserVersion | CSF.Extensions.WebDriver",
    "keywords": "Class DottedNumericBrowserVersion Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll A BrowserVersion which is derived from a series of numeric components separated by period characters. public sealed class DottedNumericBrowserVersion : BrowserVersion, IEquatable<BrowserVersion>, IComparable<BrowserVersion> Inheritance object BrowserVersion DottedNumericBrowserVersion Implements IEquatable<BrowserVersion> IComparable<BrowserVersion> Inherited Members BrowserVersion.IsPresumedVersion BrowserVersion.Equals(object) BrowserVersion.Create(string, string) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is similar to SemanticBrowserVersion except that it is far more forgiving of unusually-formatted versions. It permits any amount of leading and trailing non-numeric characters It permits any number of 'version' components, not just a maximum of 3 as is the case with SemVer Constructors DottedNumericBrowserVersion(IList<int>, bool) Initialises a new instance of DottedNumericBrowserVersion public DottedNumericBrowserVersion(IList<int> versionComponents, bool isPresumed = false) Parameters versionComponents IList<int> The version components. isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion. Exceptions ArgumentNullException If versionComponents is null. ArgumentException If versionComponents has a count of zero. Properties VersionComponents Gets the collection of numeric version components. public IReadOnlyList<int> VersionComponents { get; } Property Value IReadOnlyList<int> The version components. Methods CompareTo(BrowserVersion) public override int CompareTo(BrowserVersion other) Parameters other BrowserVersion Returns int Equals(BrowserVersion) public override bool Equals(BrowserVersion other) Parameters other BrowserVersion Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string TryParse(string, out DottedNumericBrowserVersion, bool) Attempts to parse the specified version string as a DottedNumericBrowserVersion. public static bool TryParse(string version, out DottedNumericBrowserVersion result, bool isPresumed = false) Parameters version string The version string result DottedNumericBrowserVersion Exposes the result when this method returns true isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion Returns bool true if the parsing succeeded; false if not."
  },
  "api/CSF.Extensions.WebDriver.Identification.IGetsBrowserIdFromWebDriver.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.IGetsBrowserIdFromWebDriver.html",
    "title": "Interface IGetsBrowserIdFromWebDriver | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsBrowserIdFromWebDriver Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll An object which can get browser identification from a WebDriver. public interface IGetsBrowserIdFromWebDriver Methods GetBrowserId(IWebDriver, DriverOptions) Gets a BrowserId from the specified OpenQA.Selenium.IWebDriver and the options object with which it was created. BrowserId GetBrowserId(IWebDriver driver, DriverOptions creationOptions) Parameters driver IWebDriver The WebDriver creationOptions DriverOptions The driver options with which the driver was created Returns BrowserId A BrowserId Exceptions ArgumentNullException If driver is null."
  },
  "api/CSF.Extensions.WebDriver.Identification.IGetsBrowserInfoMatch.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.IGetsBrowserInfoMatch.html",
    "title": "Interface IGetsBrowserInfoMatch | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsBrowserInfoMatch Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll An object which determines whether a specified BrowserId is a match for a specified BrowserInfo. public interface IGetsBrowserInfoMatch Methods Matches(BrowserId, BrowserInfo) Gets a value indicating whether or not the specified browserId is a match for the specified browserInfo or not. bool Matches(BrowserId browserId, BrowserInfo browserInfo) Parameters browserId BrowserId A browser ID browserInfo BrowserInfo A browser info object Returns bool true if the browser ID matches the browser info; false if not. Exceptions ArgumentNullException If any parameter is null. ArgumentException If browserInfo has a null or empty Name."
  },
  "api/CSF.Extensions.WebDriver.Identification.IHasBrowserId.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.IHasBrowserId.html",
    "title": "Interface IHasBrowserId | CSF.Extensions.WebDriver",
    "keywords": "Interface IHasBrowserId Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll An object which provides browser identification information. public interface IHasBrowserId Properties BrowserId Gets identification information for the web browser. BrowserId BrowserId { get; } Property Value BrowserId"
  },
  "api/CSF.Extensions.WebDriver.Identification.MissingBrowserVersion.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.MissingBrowserVersion.html",
    "title": "Class MissingBrowserVersion | CSF.Extensions.WebDriver",
    "keywords": "Class MissingBrowserVersion Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Implementation of BrowserVersion which represents a null or empty string version. public sealed class MissingBrowserVersion : BrowserVersion, IEquatable<BrowserVersion>, IComparable<BrowserVersion> Inheritance object BrowserVersion MissingBrowserVersion Implements IEquatable<BrowserVersion> IComparable<BrowserVersion> Inherited Members BrowserVersion.IsPresumedVersion BrowserVersion.Equals(object) BrowserVersion.Create(string, string) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Use this class only if no other browser version is compatible with the version. Fields Instance Gets a flyweight/singleton instance of MissingBrowserVersion. public static readonly MissingBrowserVersion Instance Field Value MissingBrowserVersion Methods CompareTo(BrowserVersion) public override int CompareTo(BrowserVersion other) Parameters other BrowserVersion Returns int Equals(BrowserVersion) public override bool Equals(BrowserVersion other) Parameters other BrowserVersion Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string"
  },
  "api/CSF.Extensions.WebDriver.Identification.SemanticBrowserVersion.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.SemanticBrowserVersion.html",
    "title": "Class SemanticBrowserVersion | CSF.Extensions.WebDriver",
    "keywords": "Class SemanticBrowserVersion Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Implementation of BrowserVersion which represents a semantic version. public sealed class SemanticBrowserVersion : BrowserVersion, IEquatable<BrowserVersion>, IComparable<BrowserVersion> Inheritance object BrowserVersion SemanticBrowserVersion Implements IEquatable<BrowserVersion> IComparable<BrowserVersion> Inherited Members BrowserVersion.IsPresumedVersion BrowserVersion.Equals(object) BrowserVersion.Create(string, string) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is a version which complies with the specification at https://semver.org Actually, this class permits version strings which are somewhat less strict than the standards set-out at the semantic versioning website. The TryParse(string, out SemanticBrowserVersion, bool) method makes use of the parsing functionality within TryParse(string, SemVersionStyles, out SemVersion, int) to permit some common improper representations of a semantic version. The TryParse function in this class uses Semver.SemVersionStyles.Any to enable very generous parsing. Constructors SemanticBrowserVersion(SemVersion, bool) Initialises a new instance of SemanticBrowserVersion public SemanticBrowserVersion(SemVersion version, bool isPresumed = false) Parameters version SemVersion The semantic version. isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion. Exceptions ArgumentNullException If version is null. Properties Version Gets the semantic version represented by the current instance. public SemVersion Version { get; } Property Value SemVersion Methods CompareTo(BrowserVersion) public override int CompareTo(BrowserVersion other) Parameters other BrowserVersion Returns int Equals(BrowserVersion) public override bool Equals(BrowserVersion other) Parameters other BrowserVersion Returns bool GetHashCode() public override int GetHashCode() Returns int Parse(string, bool) Creates a SemanticBrowserVersion from a string, raising an exception if the string is not a valid version. public static SemanticBrowserVersion Parse(string version, bool isPresumed = false) Parameters version string The version string isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion Returns SemanticBrowserVersion A semantic browser version. Remarks Consider using TryParse(string, out SemanticBrowserVersion, bool) if you are not certain that the version string is valid. Exceptions FormatException If the version is not a valid semantic version. ToString() public override string ToString() Returns string TryParse(string, out SemanticBrowserVersion, bool) Attempts to parse the specified version string as a SemanticBrowserVersion. public static bool TryParse(string version, out SemanticBrowserVersion result, bool isPresumed = false) Parameters version string The version string result SemanticBrowserVersion Exposes the result when this method returns true isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion Returns bool true if the parsing succeeded; false if not."
  },
  "api/CSF.Extensions.WebDriver.Identification.UnrecognisedBrowserVersion.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.UnrecognisedBrowserVersion.html",
    "title": "Class UnrecognisedBrowserVersion | CSF.Extensions.WebDriver",
    "keywords": "Class UnrecognisedBrowserVersion Namespace CSF.Extensions.WebDriver.Identification Assembly CSF.Extensions.WebDriver.dll Implementation of BrowserVersion which works for any non-empty/non-null string representation of a version. public sealed class UnrecognisedBrowserVersion : BrowserVersion, IEquatable<BrowserVersion>, IComparable<BrowserVersion> Inheritance object BrowserVersion UnrecognisedBrowserVersion Implements IEquatable<BrowserVersion> IComparable<BrowserVersion> Inherited Members BrowserVersion.IsPresumedVersion BrowserVersion.Equals(object) BrowserVersion.Create(string, string) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is a very weak way to represent a version and should be used only as a fall-back when a web driver does not offer a better version representation, such as one which would be compatible with either SemanticBrowserVersion or DottedNumericBrowserVersion. Equality with another UnrecognisedBrowserVersion is performed using a culture-insensitive match of the Version property values. Sorting/comparison is also performed based upon the culture-invariant sort order of the version strings, which is unlikely to be very useful. Constructors UnrecognisedBrowserVersion(string, bool) Initialises a new instance of UnrecognisedBrowserVersion. public UnrecognisedBrowserVersion(string version, bool isPresumed = false) Parameters version string The version string isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion. Exceptions ArgumentException If version is null or an empty string. Properties Version Gets the version string with which the current instance was initialised. public string Version { get; } Property Value string Methods CompareTo(BrowserVersion) public override int CompareTo(BrowserVersion other) Parameters other BrowserVersion Returns int Equals(BrowserVersion) public override bool Equals(BrowserVersion other) Parameters other BrowserVersion Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string TryParse(string, out UnrecognisedBrowserVersion, bool) Attempts to parse the specified version string as a UnrecognisedBrowserVersion. public static bool TryParse(string version, out UnrecognisedBrowserVersion result, bool isPresumed = false) Parameters version string The version string result UnrecognisedBrowserVersion Exposes the result when this method returns true isPresumed bool Whether or not this is a presumed version; see IsPresumedVersion Returns bool true if the parsing succeeded; false if not."
  },
  "api/CSF.Extensions.WebDriver.Identification.html": {
    "href": "api/CSF.Extensions.WebDriver.Identification.html",
    "title": "Namespace CSF.Extensions.WebDriver.Identification | CSF.Extensions.WebDriver",
    "keywords": "Namespace CSF.Extensions.WebDriver.Identification Classes BrowserId A model which represents a combination of browser, OS platform and the browser version. BrowserIdFactory Default implementation of IGetsBrowserIdFromWebDriver. BrowserInfoMatcher Default implementation of IGetsBrowserInfoMatch. BrowserVersion Base class for a model which describes a WebDriver browser version. DottedNumericBrowserVersion A BrowserVersion which is derived from a series of numeric components separated by period characters. MissingBrowserVersion Implementation of BrowserVersion which represents a null or empty string version. SemanticBrowserVersion Implementation of BrowserVersion which represents a semantic version. UnrecognisedBrowserVersion Implementation of BrowserVersion which works for any non-empty/non-null string representation of a version. Interfaces IGetsBrowserIdFromWebDriver An object which can get browser identification from a WebDriver. IGetsBrowserInfoMatch An object which determines whether a specified BrowserId is a match for a specified BrowserInfo. IHasBrowserId An object which provides browser identification information."
  },
  "api/CSF.Extensions.WebDriver.Proxies.IAugmentsProxyContext.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.IAugmentsProxyContext.html",
    "title": "Interface IAugmentsProxyContext | CSF.Extensions.WebDriver",
    "keywords": "Interface IAugmentsProxyContext Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll An object which can augment a WebDriverProxyCreationContext which will subsequently be used to create a proxy OpenQA.Selenium.IWebDriver. public interface IAugmentsProxyContext Methods AugmentContext(WebDriverProxyCreationContext) Augment the specified WebDriverProxyCreationContext with additional functionality. void AugmentContext(WebDriverProxyCreationContext context) Parameters context WebDriverProxyCreationContext The context object to augment."
  },
  "api/CSF.Extensions.WebDriver.Proxies.IGetsProxyWebDriver.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.IGetsProxyWebDriver.html",
    "title": "Interface IGetsProxyWebDriver | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsProxyWebDriver Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll An object which serves as a factory for proxy instances of OpenQA.Selenium.IWebDriver. public interface IGetsProxyWebDriver Remarks Some of the functionality of CSF.Extensions.WebDriver requires the replacement of the WebDriver with a proxy object. The proxy is an object which implements all of the same interfaces as the original WebDriver and behaves in the same way but is augmented with additional functionality. This proxying process is presently implemented via Castle DynamicProxy: https://www.castleproject.org/projects/dynamicproxy/. This kind of augmentation of objects is typically performed via the decorator pattern: https://en.wikipedia.org/wiki/Decorator_pattern. That pattern is unsuitable here though because it is impossible to know the complete list of interfaces that the original WebDriver object implements until runtime. Without proxies this library would be forced to either: Assume that the WebDriver implements all of Selenium's possible interfaces, possibly claiming to implement some interfaces that the WebDriver does not support Or implement only a minimal set of interfaces: the lowest common denominator, which would result in a less useful WebDriver object In addition, a new third-party WebDriver which implements as-yet-unknown interfaces would not be able to expose them from a traditional decorator. A proxy, which is created at runtime, may use reflection to determine all of the interfaces implemented by the WebDriver and implement those same interfaces, whilst adding support for the extra interfaces that are provided by this library. In practice, this has no effect upon the returned instance of OpenQA.Selenium.IWebDriver; any casting/safe-casting logic which relies on Selenium or other interfaces will continue to work as it has done before. Logic such as the following is still possible if webDriverProxy is a proxy object. if(webDriverProxy is IDevTools devToolsDriver) { var session = devToolsDriver.GetDevToolsSession(); // ... } What will not work with a proxy object is casting back to the original OpenQA.Selenium.IWebDriver implementation class type. The following would be false if webDriverProxy were a proxy object: var amIChrome = webDriverProxy is ChromeDriver; Using a functionality-providing object via its interfaces and avoiding reliance upon concrete classes is generally best practice across all of software development so well-written code should not be concerned with this limitation. To cope with the rare scenarios in which this limitation is troublesome, all WebDriver proxies are enhanced with the interface IHasUnproxiedWebDriver. This interface provides functionality to get the original 'unproxied' WebDriver instance. There is also an extension method for the OpenQA.Selenium.IWebDriver interface: Unproxy(IWebDriver) to provide convenient and reliable access to that functionality. Methods GetProxyWebDriver(IWebDriver, ProxyCreationOptions) Gets a proxy object implementing OpenQA.Selenium.IWebDriver as well as all of the other interfaces implemented by the webDriver, enriching it with additional functionality as determined by the options. IWebDriver GetProxyWebDriver(IWebDriver webDriver, ProxyCreationOptions options) Parameters webDriver IWebDriver The original WebDriver instance to proxy. options ProxyCreationOptions Options related to the creation of this proxy. Returns IWebDriver A proxy OpenQA.Selenium.IWebDriver instance. Remarks See the remarks upon IGetsProxyWebDriver for more information."
  },
  "api/CSF.Extensions.WebDriver.Proxies.IHasUnproxiedWebDriver.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.IHasUnproxiedWebDriver.html",
    "title": "Interface IHasUnproxiedWebDriver | CSF.Extensions.WebDriver",
    "keywords": "Interface IHasUnproxiedWebDriver Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll An object which provides access to an 'unproxied' OpenQA.Selenium.IWebDriver instance. public interface IHasUnproxiedWebDriver Remarks For more information about the proxying functionality within this library and its consequences, see IGetsProxyWebDriver. This interface provides functionality to get the original 'unproxied' WebDriver instance, undoing the proxying process. Note that such an unproxied WebDriver will have lost the augmented functionality provided by this library. There is also a 'convenience' extension method: Unproxy(IWebDriver) to use this in a consistent manner. Properties UnproxiedWebDriver Gets the 'unproxied' WebDriver. IWebDriver UnproxiedWebDriver { get; } Property Value IWebDriver See Also Unproxy(IWebDriver)"
  },
  "api/CSF.Extensions.WebDriver.Proxies.IdentificationAugmenter.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.IdentificationAugmenter.html",
    "title": "Class IdentificationAugmenter | CSF.Extensions.WebDriver",
    "keywords": "Class IdentificationAugmenter Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Implementation of IAugmentsProxyContext which adds IHasBrowserId to the proxy. public class IdentificationAugmenter : IAugmentsProxyContext Inheritance object IdentificationAugmenter Implements IAugmentsProxyContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdentificationAugmenter(IGetsBrowserIdFromWebDriver) Initialises a new instance of IdentificationAugmenter. public IdentificationAugmenter(IGetsBrowserIdFromWebDriver browserIdFactory) Parameters browserIdFactory IGetsBrowserIdFromWebDriver The browser identity factory. Exceptions ArgumentNullException If browserIdFactory is null. Methods AugmentContext(WebDriverProxyCreationContext) Augment the specified WebDriverProxyCreationContext with additional functionality. public void AugmentContext(WebDriverProxyCreationContext context) Parameters context WebDriverProxyCreationContext The context object to augment."
  },
  "api/CSF.Extensions.WebDriver.Proxies.IdentificationInterceptor.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.IdentificationInterceptor.html",
    "title": "Class IdentificationInterceptor | CSF.Extensions.WebDriver",
    "keywords": "Class IdentificationInterceptor Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Interceptor which provides functionality for IHasBrowserId. public class IdentificationInterceptor : IInterceptor Inheritance object IdentificationInterceptor Implements IInterceptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdentificationInterceptor(BrowserId) Initialises a new instance of IdentificationInterceptor. public IdentificationInterceptor(BrowserId browserId) Parameters browserId BrowserId The browser identity Exceptions ArgumentNullException If browserId is null. Methods Intercept(IInvocation) public void Intercept(IInvocation invocation) Parameters invocation IInvocation"
  },
  "api/CSF.Extensions.WebDriver.Proxies.ProxyCreationOptions.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.ProxyCreationOptions.html",
    "title": "Class ProxyCreationOptions | CSF.Extensions.WebDriver",
    "keywords": "Class ProxyCreationOptions Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Options related to the creation of a proxy OpenQA.Selenium.IWebDriver. public class ProxyCreationOptions Inheritance object ProxyCreationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AddIdentification Gets or sets a value indicating whether or not the created proxy should be enriched with the functionality of IHasBrowserId. public bool AddIdentification { get; set; } Property Value bool AddQuirks Gets or sets a value indicating whether or not the created proxy should be enriched with the functionality of IHasQuirks. public bool AddQuirks { get; set; } Property Value bool Remarks If this property is true then the value of AddIdentification is irrelevant; the functionality of IHasBrowserId will always be added to the proxy, as this quirks functionality depends upon it. DriverOptions Gets or sets the DriverOptions with which the WebDriver was originally created. public DriverOptions DriverOptions { get; set; } Property Value DriverOptions"
  },
  "api/CSF.Extensions.WebDriver.Proxies.QuirksAugmenter.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.QuirksAugmenter.html",
    "title": "Class QuirksAugmenter | CSF.Extensions.WebDriver",
    "keywords": "Class QuirksAugmenter Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Implementation of IAugmentsProxyContext which adds IHasQuirks to the proxy. public class QuirksAugmenter : IAugmentsProxyContext Inheritance object QuirksAugmenter Implements IAugmentsProxyContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuirksAugmenter(IServiceProvider) Initialises a new instance of QuirksAugmenter. public QuirksAugmenter(IServiceProvider services) Parameters services IServiceProvider The DI services provider. Exceptions ArgumentNullException If services is null. Methods AugmentContext(WebDriverProxyCreationContext) Augment the specified WebDriverProxyCreationContext with additional functionality. public void AugmentContext(WebDriverProxyCreationContext context) Parameters context WebDriverProxyCreationContext The context object to augment."
  },
  "api/CSF.Extensions.WebDriver.Proxies.QuirksInterceptor.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.QuirksInterceptor.html",
    "title": "Class QuirksInterceptor | CSF.Extensions.WebDriver",
    "keywords": "Class QuirksInterceptor Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Interceptor which provides functionality for IHasQuirks. public class QuirksInterceptor : IInterceptor Inheritance object QuirksInterceptor Implements IInterceptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuirksInterceptor(BrowserId, IGetsQuirksForBrowserId) Initialises a new instance of QuirksInterceptor. public QuirksInterceptor(BrowserId browserId, IGetsQuirksForBrowserId quirksMatcher) Parameters browserId BrowserId The browser identity quirksMatcher IGetsQuirksForBrowserId A service to match a browser with its quirks Exceptions ArgumentNullException If any parameter is null. Methods Intercept(IInvocation) public void Intercept(IInvocation invocation) Parameters invocation IInvocation"
  },
  "api/CSF.Extensions.WebDriver.Proxies.UnproxyingAugmenter.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.UnproxyingAugmenter.html",
    "title": "Class UnproxyingAugmenter | CSF.Extensions.WebDriver",
    "keywords": "Class UnproxyingAugmenter Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Implementation of IAugmentsProxyContext which adds IHasUnproxiedWebDriver to the proxy. public class UnproxyingAugmenter : IAugmentsProxyContext Inheritance object UnproxyingAugmenter Implements IAugmentsProxyContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AugmentContext(WebDriverProxyCreationContext) Augment the specified WebDriverProxyCreationContext with additional functionality. public void AugmentContext(WebDriverProxyCreationContext context) Parameters context WebDriverProxyCreationContext The context object to augment."
  },
  "api/CSF.Extensions.WebDriver.Proxies.UnproxyingInterceptor.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.UnproxyingInterceptor.html",
    "title": "Class UnproxyingInterceptor | CSF.Extensions.WebDriver",
    "keywords": "Class UnproxyingInterceptor Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Interceptor which provides functionality for IHasUnproxiedWebDriver. public class UnproxyingInterceptor : IInterceptor Inheritance object UnproxyingInterceptor Implements IInterceptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnproxyingInterceptor(IWebDriver) Initialises a new instance of UnproxyingInterceptor. public UnproxyingInterceptor(IWebDriver unproxiedDriver) Parameters unproxiedDriver IWebDriver The unproxied WebDriver Exceptions ArgumentNullException If unproxiedDriver is null. Methods Intercept(IInvocation) public void Intercept(IInvocation invocation) Parameters invocation IInvocation"
  },
  "api/CSF.Extensions.WebDriver.Proxies.WebDriverProxyCreationContext.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.WebDriverProxyCreationContext.html",
    "title": "Class WebDriverProxyCreationContext | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverProxyCreationContext Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Contextual information related to the creation of a WebDriver proxy. public class WebDriverProxyCreationContext Inheritance object WebDriverProxyCreationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebDriverProxyCreationContext(IWebDriver, ProxyCreationOptions) Initialises a new instance of WebDriverProxyCreationContext. public WebDriverProxyCreationContext(IWebDriver webDriver, ProxyCreationOptions creationOptions) Parameters webDriver IWebDriver The WebDriver from which the proxy will be created. creationOptions ProxyCreationOptions The WebDriver proxy creation options. Exceptions ArgumentNullException If either parameter is null. Properties BrowserId Gets or sets the identity information for the browser. public BrowserId BrowserId { get; set; } Property Value BrowserId CreationOptions Gets the driver options from which the WebDriver was originally created. public ProxyCreationOptions CreationOptions { get; } Property Value ProxyCreationOptions Remarks Although it should be unlikely, consumers should deal with scenarios in which this property value is null. Interceptors Gets a collection of the Castle DynamicProxy interceptors which shall be applied to the proxy. public ISet<IInterceptor> Interceptors { get; } Property Value ISet<IInterceptor> Interfaces Gets a collection of the interfaces which the proxy object shall implement. public ISet<Type> Interfaces { get; } Property Value ISet<Type> WebDriver Gets the WebDriver object from which a proxy will be created. public IWebDriver WebDriver { get; } Property Value IWebDriver"
  },
  "api/CSF.Extensions.WebDriver.Proxies.WebDriverProxyFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.WebDriverProxyFactory.html",
    "title": "Class WebDriverProxyFactory | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverProxyFactory Namespace CSF.Extensions.WebDriver.Proxies Assembly CSF.Extensions.WebDriver.dll Factory class which creates a proxy WebDriver using Castle.DynamicProxy. public class WebDriverProxyFactory : IGetsProxyWebDriver Inheritance object WebDriverProxyFactory Implements IGetsProxyWebDriver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebDriverProxyFactory(IServiceProvider) Initialises a new instance of WebDriverProxyFactory. public WebDriverProxyFactory(IServiceProvider services) Parameters services IServiceProvider DI services. Exceptions ArgumentNullException If services is null. Methods GetProxyWebDriver(IWebDriver, ProxyCreationOptions) Gets a proxy object implementing OpenQA.Selenium.IWebDriver as well as all of the other interfaces implemented by the webDriver, enriching it with additional functionality as determined by the options. public IWebDriver GetProxyWebDriver(IWebDriver webDriver, ProxyCreationOptions options) Parameters webDriver IWebDriver The original WebDriver instance to proxy. options ProxyCreationOptions Options related to the creation of this proxy. Returns IWebDriver A proxy OpenQA.Selenium.IWebDriver instance. Remarks See the remarks upon IGetsProxyWebDriver for more information."
  },
  "api/CSF.Extensions.WebDriver.Proxies.html": {
    "href": "api/CSF.Extensions.WebDriver.Proxies.html",
    "title": "Namespace CSF.Extensions.WebDriver.Proxies | CSF.Extensions.WebDriver",
    "keywords": "Namespace CSF.Extensions.WebDriver.Proxies Classes IdentificationAugmenter Implementation of IAugmentsProxyContext which adds IHasBrowserId to the proxy. IdentificationInterceptor Interceptor which provides functionality for IHasBrowserId. ProxyCreationOptions Options related to the creation of a proxy OpenQA.Selenium.IWebDriver. QuirksAugmenter Implementation of IAugmentsProxyContext which adds IHasQuirks to the proxy. QuirksInterceptor Interceptor which provides functionality for IHasQuirks. UnproxyingAugmenter Implementation of IAugmentsProxyContext which adds IHasUnproxiedWebDriver to the proxy. UnproxyingInterceptor Interceptor which provides functionality for IHasUnproxiedWebDriver. WebDriverProxyCreationContext Contextual information related to the creation of a WebDriver proxy. WebDriverProxyFactory Factory class which creates a proxy WebDriver using Castle.DynamicProxy. Interfaces IAugmentsProxyContext An object which can augment a WebDriverProxyCreationContext which will subsequently be used to create a proxy OpenQA.Selenium.IWebDriver. IGetsProxyWebDriver An object which serves as a factory for proxy instances of OpenQA.Selenium.IWebDriver. IHasUnproxiedWebDriver An object which provides access to an 'unproxied' OpenQA.Selenium.IWebDriver instance."
  },
  "api/CSF.Extensions.WebDriver.Quirks.ApplicableQuirksProvider.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.ApplicableQuirksProvider.html",
    "title": "Class ApplicableQuirksProvider | CSF.Extensions.WebDriver",
    "keywords": "Class ApplicableQuirksProvider Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll Default implementation of IGetsQuirksForBrowserId. public class ApplicableQuirksProvider : IGetsQuirksForBrowserId Inheritance object ApplicableQuirksProvider Implements IGetsQuirksForBrowserId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicableQuirksProvider(IGetsBrowserInfoMatch, IGetsQuirksData) Initialises a new instance of ApplicableQuirksProvider. public ApplicableQuirksProvider(IGetsBrowserInfoMatch browserMatcher, IGetsQuirksData quirksDataProvider) Parameters browserMatcher IGetsBrowserInfoMatch A browser matcher quirksDataProvider IGetsQuirksData A provider for the source quirks data Exceptions ArgumentNullException If browserMatcher is null. Methods GetApplicableQuirks(BrowserId) Gets a collection of the named quirks which are applicable to the specified browser. public IReadOnlyCollection<string> GetApplicableQuirks(BrowserId browserId) Parameters browserId BrowserId The browser ID Returns IReadOnlyCollection<string> Exceptions ArgumentNullException If browserId is null."
  },
  "api/CSF.Extensions.WebDriver.Quirks.BrowserInfo.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.BrowserInfo.html",
    "title": "Class BrowserInfo | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserInfo Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll Information which identifies a web browser and range of versions which are affected by a quirk. public class BrowserInfo Inheritance object BrowserInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The only truly mandatory property in this model is Name. It is not expected to be likely that both of MinVersion & MaxVersion are omitted though. Such a situation would mean \"every version in existence\". Properties MaxVersion Gets or sets the maximum version (inclusive) which is affected by the quirk. public string MaxVersion { get; set; } Property Value string Remarks This property is optional, if omitted then it means \"All versions from the MinVersion & up\" with no maximum. MinVersion Gets or sets the minimum version (inclusive) which is affected by the quirk. public string MinVersion { get; set; } Property Value string Remarks This property is optional, if omitted then it means \"All versions from the very first version up to the MaxVersion\". Name Gets or sets the browser name. public string Name { get; set; } Property Value string Remarks This property is mandatory, identifying a browser name which this quirk affects. Platform Gets or sets the browser OS platform. public string Platform { get; set; } Property Value string Remarks This property is optional, if omitted then it means that the quirk does not depend upon the OS platform. If specified then the quirk will only be interpreted as affecting the browser on the matching OS platform."
  },
  "api/CSF.Extensions.WebDriver.Quirks.BrowserInfoCollection.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.BrowserInfoCollection.html",
    "title": "Class BrowserInfoCollection | CSF.Extensions.WebDriver",
    "keywords": "Class BrowserInfoCollection Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll A collection of BrowserInfo indicating which browsers/version ranges are affected by a quirk. public class BrowserInfoCollection Inheritance object BrowserInfoCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AffectedBrowsers Gets or sets the collection of BrowserInfo affected by the current quirk. public ISet<BrowserInfo> AffectedBrowsers { get; set; } Property Value ISet<BrowserInfo>"
  },
  "api/CSF.Extensions.WebDriver.Quirks.IGetsQuirksData.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.IGetsQuirksData.html",
    "title": "Interface IGetsQuirksData | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsQuirksData Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll An object which can get the source data for browser quirks. public interface IGetsQuirksData Methods GetQuirksData() Gets the source data for browser quirks, using state available in the current instance. QuirksData GetQuirksData() Returns QuirksData Remarks Typically this data would come from dependency injected services/options. See AddWebDriverQuirks(IServiceCollection, QuirksData, bool, string) for more information about configuring this in a typical app."
  },
  "api/CSF.Extensions.WebDriver.Quirks.IGetsQuirksForBrowserId.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.IGetsQuirksForBrowserId.html",
    "title": "Interface IGetsQuirksForBrowserId | CSF.Extensions.WebDriver",
    "keywords": "Interface IGetsQuirksForBrowserId Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll An object which - given a BrowserId - can get a collection of the quirks which are applicable to that browser. public interface IGetsQuirksForBrowserId Methods GetApplicableQuirks(BrowserId) Gets a collection of the named quirks which are applicable to the specified browser. IReadOnlyCollection<string> GetApplicableQuirks(BrowserId browserId) Parameters browserId BrowserId The browser ID Returns IReadOnlyCollection<string> Exceptions ArgumentNullException If browserId is null."
  },
  "api/CSF.Extensions.WebDriver.Quirks.IHasQuirks.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.IHasQuirks.html",
    "title": "Interface IHasQuirks | CSF.Extensions.WebDriver",
    "keywords": "Interface IHasQuirks Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll An object which can indicate whether or not it is affected by specified browser quirks. public interface IHasQuirks Remarks There are many implementations of OpenQA.Selenium.IWebDriver, each representing a different web browser. Due to design choices in these web browsers, differences in OS platform and perhaps even bugs in some versions of the browser or WebDriver implementations, browsers might exhibit quirky behaviour which differs from the uniform results which a perfect implementation would be expected to provide. This 'quirks' mechanism provides a way in which consumers of WebDrivers may gracefully deal with that, with minimal compromise to their design. A quirk is a named boolean flag, such as (a fictitious quirk) CannotDisplayYellow. Consumers of the WebDriver may use this interface to determine whether or not the WebDriver is affected by this quirk or not, by using the HasQuirk(IWebDriver, string) function. If the WebDriver is known to be affected by the quirk then that method will return true, or if it is not affected then the method will return false. The consumer may then take whatever course of action is required in order to work-around that quirk, if the result was true. The implementation of this interface uses the BrowserId present on the WebDriver to identify it. It then cross-references this with source data which lists which browser, platform and version ranges are affected by which quirks. It is intended that the source data listing the quirks and which browsers, platforms & browser version-ranges are affected come from configuration data. This way new quirks may be added without requiring code-changes. Quirks which are no longer relevant (for example, a bug is patched) may also be retired via configuration. The actual names of the quirks may be completely arbitrary strings. Where possible it should be a semi-human-readable identification of a piece of functionality which does not work in the expected/common manner. IE: It should indicate something that a particular WebDriver or browser implementation cannot do, or that requires a specific workaround in order to achieve the same results as other WebDriver/browser implementations. Properties AllQuirks Gets a collection of the names of all of the quirks which affect the current object. IReadOnlyCollection<string> AllQuirks { get; } Property Value IReadOnlyCollection<string> Remarks Prefer using HasQuirk(IWebDriver, string) instead of this property."
  },
  "api/CSF.Extensions.WebDriver.Quirks.QuirksData.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.QuirksData.html",
    "title": "Class QuirksData | CSF.Extensions.WebDriver",
    "keywords": "Class QuirksData Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll Gets information related to the WebDriver/browser quirks. public class QuirksData Inheritance object QuirksData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Empty Gets an empty instance of QuirksData. public static QuirksData Empty { get; } Property Value QuirksData Quirks Gets or sets a collection of the quirks, whereby each key is the name of a specific quirk. public IDictionary<string, BrowserInfoCollection> Quirks { get; set; } Property Value IDictionary<string, BrowserInfoCollection>"
  },
  "api/CSF.Extensions.WebDriver.Quirks.QuirksDataProvider.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.QuirksDataProvider.html",
    "title": "Class QuirksDataProvider | CSF.Extensions.WebDriver",
    "keywords": "Class QuirksDataProvider Namespace CSF.Extensions.WebDriver.Quirks Assembly CSF.Extensions.WebDriver.dll Implementation of IGetsQuirksData which can merge together a primary and secondary source of quirks data, providing data-shadowing capabilities. public class QuirksDataProvider : IGetsQuirksData Inheritance object QuirksDataProvider Implements IGetsQuirksData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This type provides two constructors and its behaviour will differ depending upon which is used. If this object is constructed with only one parameter, either a QuirksData or an IOptions<TOptions> of QuirksData - but not both - then the GetQuirksData() method will return an object which contains the same values as that source data. If the constructor QuirksDataProvider(IOptions<QuirksData>, QuirksData) is used with both parameters specified then the return value from GetQuirksData() will be an object that contains data resulting a merge of the data from those two sources. The merge algorithm used in the scenario noted above is: Where the options-based source data and the plain object data specify quirks that the other does not have, the result will have both quirks Where both the options-based and the plain object source data specify the same quirk, the affected browsers from the options-based data will shadow (aka 'replace' or 'override') those from the plain object Neither input object will be altered by this process; the results from GetQuirksData() will be based upon a new object The purpose of this algorithm is to permit an application to ship with a set of hard-coded quirks data. This might be an in-memory object or read from a JSON embedded resource or similar. This in-memory data may then be added-to and/or overridden (shadowed) by end-user-specified options, using the Microsoft Options Pattern. This allows end consumers to quickly react to changes in browser support via an options/configuration change, even if a library which provides a set of quirks data has not yet been updated. Constructors QuirksDataProvider(QuirksData) Initialises a new instance of QuirksDataProvider with only some in-memory source data. public QuirksDataProvider(QuirksData quirksData) Parameters quirksData QuirksData The source quirks data Remarks This constructor will initialise the object using a direct copy/clone of the data within quirksData. See the remarks upon QuirksDataProvider for more information about the available constructors. Exceptions ArgumentNullException If quirksData parameter is null. See Also QuirksDataProvider QuirksDataProvider(IOptions<QuirksData>, QuirksData) Initialises a new instance of QuirksDataProvider with quirks data options provided by the Microsoft Options Pattern, and optionally some in-memory source data with which to merge the options data. public QuirksDataProvider(IOptions<QuirksData> optionsData, QuirksData quirksData = null) Parameters optionsData IOptions<QuirksData> Source quirks data from the Microsoft Options Pattern quirksData QuirksData In-memory source quirks data Remarks If the quirksData is null or empty then this constructor will initialise the object using a direct copy/clone of the data within optionsData. If both parameters are specified then the merge algorithm described in the remarks of QuirksDataProvider will be used to merge these two data-sources together. Exceptions ArgumentNullException If optionsData parameter is null. See Also QuirksDataProvider Methods GetQuirksData() Gets the source data for browser quirks, using state available in the current instance. public QuirksData GetQuirksData() Returns QuirksData Remarks Typically this data would come from dependency injected services/options. See AddWebDriverQuirks(IServiceCollection, QuirksData, bool, string) for more information about configuring this in a typical app."
  },
  "api/CSF.Extensions.WebDriver.Quirks.html": {
    "href": "api/CSF.Extensions.WebDriver.Quirks.html",
    "title": "Namespace CSF.Extensions.WebDriver.Quirks | CSF.Extensions.WebDriver",
    "keywords": "Namespace CSF.Extensions.WebDriver.Quirks Classes ApplicableQuirksProvider Default implementation of IGetsQuirksForBrowserId. BrowserInfo Information which identifies a web browser and range of versions which are affected by a quirk. BrowserInfoCollection A collection of BrowserInfo indicating which browsers/version ranges are affected by a quirk. QuirksData Gets information related to the WebDriver/browser quirks. QuirksDataProvider Implementation of IGetsQuirksData which can merge together a primary and secondary source of quirks data, providing data-shadowing capabilities. Interfaces IGetsQuirksData An object which can get the source data for browser quirks. IGetsQuirksForBrowserId An object which - given a BrowserId - can get a collection of the quirks which are applicable to that browser. IHasQuirks An object which can indicate whether or not it is affected by specified browser quirks."
  },
  "api/CSF.Extensions.WebDriver.ServiceCollectionExtensions.html": {
    "href": "api/CSF.Extensions.WebDriver.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | CSF.Extensions.WebDriver",
    "keywords": "Class ServiceCollectionExtensions Namespace CSF.Extensions.WebDriver Assembly CSF.Extensions.WebDriver.dll Extension methods for IServiceCollection to add web driver factory options, created from configuration. public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddWebDriverFactory(IServiceCollection, IConfigurationSection, Action<WebDriverCreationOptionsCollection>) Adds/registers the web driver factory and related services for applications which make use of the Options & Configuration patterns, using a specified configuration section. public static IServiceCollection AddWebDriverFactory(this IServiceCollection services, IConfigurationSection configSection, Action<WebDriverCreationOptionsCollection> configureOptions = null) Parameters services IServiceCollection The service collection to which the services should be added. configSection IConfigurationSection A configuration section from which the WebDriverCreationOptionsCollection should be bound. configureOptions Action<WebDriverCreationOptionsCollection> An optional method body which may inspect or alter the options after it has been bound from the configuration. Returns IServiceCollection The service collection, so that calls may be chained. Remarks When calling this method, there is no need to use AddWebDriverFactoryWithoutOptionsPattern(IServiceCollection), as this method implicitly adds those services as well. This method enables the use of IGetsWebDriver and its implementation WebDriverFactory: A 'universal WebDriver factory'. This also adds an IOptions<TOptions> for WebDriverCreationOptionsCollection to dependency injection. This overload expects the specified configuration section to correspond directly with the root of the WebDriverCreationOptionsCollection to be bound. A good use-case for the configureOptions parameter is to add secrets/credentials for remote WebDrivers to the options. It is not best practice to include credentials/passwords in configuration which is checked into source control. Instead, configure secrets like this in your environment directly and consume them in your application/tests as environment variables. This options-configuration callback may be used to read those secrets from the environment and supplement the configuration, without the need to include those secrets in any configuration files. An important technique to remember is that the IConfiguration may be populated from more than one source. For example, in a Microsoft Generic Host application, it is default behaviour to receive configuration from both an appsettings.json as well as supplemental command-line parameters and/or environment variables. That technique is very useful for setting the value of SelectedConfiguration. The options collection in a configuration file may contain all of the WebDriver configurations that your application would use in any scenario, and may use a single command-line parameter or environment variable to choose which of those WebDriver configurations should be activated. AddWebDriverFactory(IServiceCollection, string, Action<WebDriverCreationOptionsCollection>) Adds/registers the web driver factory and related services for applications which make use of the Options & Configuration patterns. public static IServiceCollection AddWebDriverFactory(this IServiceCollection services, string configPath = \"WebDriverFactory\", Action<WebDriverCreationOptionsCollection> configureOptions = null) Parameters services IServiceCollection The service collection to which the options should be added. configPath string An optional path from the root of the configuration; if null then the default value of WebDriverFactory will be used. configureOptions Action<WebDriverCreationOptionsCollection> An optional method body which may inspect or alter the options after it has been bound from the configuration. Returns IServiceCollection The service collection, so that calls may be chained. Remarks When calling this method, there is no need to use AddWebDriverFactoryWithoutOptionsPattern(IServiceCollection), as this method implicitly adds those services as well. This method enables the use of IGetsWebDriver and its implementation WebDriverFactory: A 'universal WebDriver factory'. This also adds an IOptions<TOptions> for WebDriverCreationOptionsCollection to dependency injection, using the IConfiguration present in the application. If the configPath is not specified, then the options will be created from a configuration path named WebDriverFactory, relative to the root of the application's configuration. A good use-case for the configureOptions parameter is to add secrets/credentials for remote WebDrivers to the options. It is not best practice to include credentials/passwords in configuration which is checked into source control. Instead, configure secrets like this in your environment directly and consume them in your application/tests as environment variables. This options-configuration callback may be used to read those secrets from the environment and supplement the configuration, without the need to include those secrets in any configuration files. An important technique to remember is that the IConfiguration may be populated from more than one source. For example, in a Microsoft Generic Host application, it is default behaviour to receive configuration from both an appsettings.json as well as supplemental command-line parameters and/or environment variables. That technique is very useful for setting the value of SelectedConfiguration. The options collection in a configuration file may contain all of the WebDriver configurations that your application would use in any scenario, and may use a single command-line parameter or environment variable to choose which of those WebDriver configurations should be activated. AddWebDriverFactoryWithoutOptionsPattern(IServiceCollection) Adds/registers the service types required to make use of a WebDriver factory which does not depend upon the Options & Configuration patterns. public static IServiceCollection AddWebDriverFactoryWithoutOptionsPattern(this IServiceCollection services) Parameters services IServiceCollection The service collection to which the services should be added. Returns IServiceCollection The service collection, so that calls may be chained. Remarks Use this method if your application does not make use of either Microsoft.Extensions.Options or Microsoft.Extensions.Configuration. You will not be able to use IGetsWebDriver or WebDriverFactory but you will be able to use ICreatesWebDriverFromOptions. If you do use the Options & Configuration patterns then use an overload of AddWebDriverFactory(IServiceCollection, string, Action<WebDriverCreationOptionsCollection>) instead and do not use this method. The UseWebDriverFactory methods implicitly include all of the services which are included here. AddWebDriverQuirks(IServiceCollection, QuirksData, bool, string) Adds services to depenency injection which support the 'browser quirks' infrastructure. public static IServiceCollection AddWebDriverQuirks(this IServiceCollection services, QuirksData quirksData = null, bool useOptions = true, string configPath = \"WebDriverQuirks\") Parameters services IServiceCollection The service collection to which the services should be added. quirksData QuirksData An optional source of static quirks data. useOptions bool Whether or not to use quirks information from the Microsoft Options Pattern as a source of data, to either provide all of the quirks, or to supplement/shadow the data in quirksData. configPath string A string indicating the configuration path at which to find quirks data; meaningless and unused if useOptions is false. Returns IServiceCollection Remarks Either quirksData must not be null or useOptions must be true or else an exception will be raised from this method. If you wish to make use of the browser-quirks functionality provided by this library then this method is used to set that functionality up within dependency injection. This method permits the usage of up to two sources of information for the QuirksData which shall be used to indicate which browsers/versions are affected by which quirks: A static source of data, provided via quirksData Data coming from the Microsoft Options Pattern, if useOptions is set to true (this is the default value) The purpose of using two sources of data for the quirks is described in more depth in the remarks to QuirksDataProvider but in short it allows library authors to provide some static quirks data which may be supplemented and/or overridden (in part or completely) by user-specified options. If you wish to use AddQuirks then this method must be used in order to add the required services to DI. Exceptions ArgumentException If both quirksData is null and useOptions is false. See Also QuirksDataProvider IHasQuirks"
  },
  "api/CSF.Extensions.WebDriver.WebDriverFactory.html": {
    "href": "api/CSF.Extensions.WebDriver.WebDriverFactory.html",
    "title": "Class WebDriverFactory | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverFactory Namespace CSF.Extensions.WebDriver Assembly CSF.Extensions.WebDriver.dll A 'universal web driver factory' which uses the options pattern to inject a WebDriverCreationOptionsCollection and forward that information to a. ICreatesWebDriverFromOptions. public class WebDriverFactory : IGetsWebDriver Inheritance object WebDriverFactory Implements IGetsWebDriver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebDriverFactory(IOptions<WebDriverCreationOptionsCollection>, ICreatesWebDriverFromOptions) Initialises a new instance of WebDriverFactory. public WebDriverFactory(IOptions<WebDriverCreationOptionsCollection> options, ICreatesWebDriverFromOptions factory) Parameters options IOptions<WebDriverCreationOptionsCollection> The application's options related to creation of web drivers. factory ICreatesWebDriverFromOptions The underlying driver factory Exceptions ArgumentNullException If either parameter is null. Methods GetDefaultWebDriver(Action<DriverOptions>) Gets an OpenQA.Selenium.IWebDriver using the driver configuration indicated by the SelectedConfiguration. public WebDriverAndOptions GetDefaultWebDriver(Action<DriverOptions> supplementaryConfiguration = null) Parameters supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks The supplementaryConfiguration can be useful for customising the WebDriver options in a manner specific to a single WebDriver. For example some remote WebDriver providers offer a facility to 'tag' the WebDriver with a current test/scenario name. This is done by adding additional options to the DriverOptions, specific to that scenario. GetWebDriver(string, Action<DriverOptions>) Gets an OpenQA.Selenium.IWebDriver using the named driver configuration. public WebDriverAndOptions GetWebDriver(string configurationName, Action<DriverOptions> supplementaryConfiguration = null) Parameters configurationName string The driver configuration name. supplementaryConfiguration Action<DriverOptions> An optional action which further-configures the WebDriver options before the driver is created. Returns WebDriverAndOptions An object containing both a WebDriver and the options which were used to create it. Remarks The configurationName must correspond to a key within the DriverConfigurations collection. The supplementaryConfiguration can be useful for customising the WebDriver options in a manner specific to a single WebDriver. For example some remote WebDriver providers offer a facility to 'tag' the WebDriver with a current test/scenario name. This is done by adding additional options to the DriverOptions, specific to that scenario."
  },
  "api/CSF.Extensions.WebDriver.html": {
    "href": "api/CSF.Extensions.WebDriver.html",
    "title": "Namespace CSF.Extensions.WebDriver | CSF.Extensions.WebDriver",
    "keywords": "Namespace CSF.Extensions.WebDriver Classes ServiceCollectionExtensions Extension methods for IServiceCollection to add web driver factory options, created from configuration. WebDriverFactory A 'universal web driver factory' which uses the options pattern to inject a WebDriverCreationOptionsCollection and forward that information to a. ICreatesWebDriverFromOptions. Interfaces IGetsWebDriver An object which can get an OpenQA.Selenium.IWebDriver from the options available in the application."
  },
  "api/OpenQA.Selenium.WebDriverExtensions.html": {
    "href": "api/OpenQA.Selenium.WebDriverExtensions.html",
    "title": "Class WebDriverExtensions | CSF.Extensions.WebDriver",
    "keywords": "Class WebDriverExtensions Namespace OpenQA.Selenium Assembly CSF.Extensions.WebDriver.dll Extension methods for OpenQA.Selenium.IWebDriver. public static class WebDriverExtensions Inheritance object WebDriverExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBrowserId(IWebDriver) Gets the BrowserId from a WebDriver, if the browser identification functionality is activated. public static BrowserId GetBrowserId(this IWebDriver webDriver) Parameters webDriver IWebDriver Returns BrowserId The browser identity information, or a null reference. Remarks If the WebDriver is not a proxy which was created via IGetsProxyWebDriver, or if both AddIdentification & AddQuirks were false when the proxy was created then this method will return null. Otherwise, this method will get the browser identification information from the proxy. This is a convenience method which avoids the need to manually type-check for the IHasBrowserId interface. GetFirstApplicableQuirk(IWebDriver, params string[]) Gets the first of an ordered collection of quirks which affects the specified WebDriver. public static string GetFirstApplicableQuirk(this IWebDriver webDriver, params string[] orderedQuirks) Parameters webDriver IWebDriver A WebDriver orderedQuirks string[] The an ordered collection of quirk names Returns string The first item from orderedQuirks which is applicable to the WebDriver, or a null reference if none of the specified quirks are applicable. Remarks If the WebDriver is not a proxy which was created via IGetsProxyWebDriver, or if AddQuirks was false when the proxy was created then this method will always return null. Otherwise, if the WebDriver is affected by any of the specified quirks then this method will return the string quirk-name of the first of the orderedQuirks which is applicable to the WebDriver. It will return null if none of the specified quirks are applicable to the WebDriver. For more information on what quirks are, see the documentation for IHasQuirks. GetQuirks(IWebDriver) Gets a collection of string quirk-names which affect the specified WebDriver, if the browser quirks functionality is activated. public static IReadOnlyCollection<string> GetQuirks(this IWebDriver webDriver) Parameters webDriver IWebDriver Returns IReadOnlyCollection<string> The browser quirks, or an empty collection. Remarks If the WebDriver is not a proxy which was created via IGetsProxyWebDriver, or if AddQuirks was false when the proxy was created then this method will return an empty collection. Otherwise, this method will get the collection of named quirks which affect the current WebDriver. This is a convenience method which avoids the need to manually type-check for the IHasQuirks interface. For more information on browser quirks and their purpose, please read the remarks for IHasQuirks. HasQuirk(IWebDriver, string) Gets a value indicating whether or not the current object is affected by the specified named quirk. public static bool HasQuirk(this IWebDriver webDriver, string quirkName) Parameters webDriver IWebDriver A WebDriver quirkName string The name of a quirk Returns bool true if the WebDriver is affected by the specified quirk; false otherwise. Remarks If the WebDriver is not a proxy which was created via IGetsProxyWebDriver, or if AddQuirks was false when the proxy was created then this method will always return false. Otherwise, this method will return true only if the specified WebDriver is affected by the specified quirk. For more information on what quirks are, see the documentation for IHasQuirks. Unproxy(IWebDriver) 'Unproxies' a WebDriver which may or may not be a proxy. public static IWebDriver Unproxy(this IWebDriver webDriver) Parameters webDriver IWebDriver A WebDriver which may or may not be a proxy. Returns IWebDriver An 'unproxied' WebDriver Remarks If the webDriver is a proxy then this method returns the original 'unproxied' driver. If the WebDriver is not a proxy then this method returns the webDriver directly. This way, whether the input parameter was a proxy or not, the output is an unproxied WebDriver. For more information about this library's proxying functionality, see IGetsProxyWebDriver. See Also IHasUnproxiedWebDriver IGetsProxyWebDriver"
  },
  "api/OpenQA.Selenium.html": {
    "href": "api/OpenQA.Selenium.html",
    "title": "Namespace OpenQA.Selenium | CSF.Extensions.WebDriver",
    "keywords": "Namespace OpenQA.Selenium Classes WebDriverExtensions Extension methods for OpenQA.Selenium.IWebDriver."
  },
  "docs/DriverIdentification.html": {
    "href": "docs/DriverIdentification.html",
    "title": "WebDriver identification | CSF.Extensions.WebDriver",
    "keywords": "WebDriver identification Most implementations of IWebDriver also implement IHasCapabilities and have capabilities indicating the browser name, version and platform. These values are strings though, which is particularly troublesome for the browser version when we need to answer questions such as is this browser between versions X and Y? When using the universal WebDriver factory, the returned WebDriver is enhanced with an additional interface: IHasBrowserId. This interface provides a get-only property of type BrowserId, which in-turn provides a BrowserVersion. This enhancement may be disabled by setting AddBrowserIdentification in the WebDriver creation options to false. A note on proxies Be aware that when the WebDriver identification functionality is activated, the WebDriver returned by the universal factory will be a proxy object and not the original concrete WebDriver implementation. In best-practice scenarios where the WebDriver is utilised only by its interfaces this should make no difference. More information is available at the linked documentation above."
  },
  "docs/Proxies.html": {
    "href": "docs/Proxies.html",
    "title": "Proxied WebDrivers | CSF.Extensions.WebDriver",
    "keywords": "Proxied WebDrivers Two of the functions of the universal factory require adding additional interfaces to the WebDriver: Browser identification WebDriver quirks The only sensible way to do this at runtime, without either disrupting other interfaces which were present on the WebDriver or being forced to violate LSP, is to make use of a proxying library. In the case of CSF.Extensions.WebDriver, Castle DynamicProxy is used. What this means is that when the universal WebDriver factory returns a WebDriver, if either or both of the functionalities above are enabled, then the WebDriver returned will be a proxy object and not the original concrete implementation of IWebDriver. Consequences Take the following code as an example, the first two lines would create a minimal default local Chrome WebDriver. // Imagine this factory has been dependency-injected ICreatesWebDriverFromOptions factory; var webDriver = factory.GetWebDriver(new () { DriverType = \"ChromeDriver\" }); var hasActiveDevTools = ((ChromeDriver) webDriver).HasActiveDevToolsSession; The last line of code above would crash with an InvalidCastException. That's because the webDriver object is not an instance of ChromeDriver, it is a proxy object wrapping that ChromeDriver instance. When using Selenium, and in software development in general, it is bad practice to depend upon concrete classes when interfaces are available. In well-written logic which depends upon only interfaces, the limitation above does not come into play. Proxy WebDrivers have all of the same interfaces as the WebDriver with which they were created and provide the same functionality for all of them. Those interfaces are detected upon the WebDriver as the proxy is created, so third party WebDrivers with additional/unknown interfaces would also be supported. Unproxying If you encounter an (unexpected) situation where the proxied WebDriver causes a problem, this library provides a mechanism of getting the original 'unproxied' WebDriver: var unproxied = maybeProxy.Unproxy(); In the example above, if maybeProxy was a proxied WebDriver, unproxied is now the original WebDriver instance which was wrapped by the proxy. The Unproxy() extension method is safe to use on both proxy and non-proxy WebDrivers. If used upon a WebDriver which is not a proxy then it simply does nothing and returns the same WebDriver instance."
  },
  "docs/Quirks.html": {
    "href": "docs/Quirks.html",
    "title": "WebDriver quirks | CSF.Extensions.WebDriver",
    "keywords": "WebDriver quirks There are a lot of web browsers and browser versions out there! Unfortunately they do not all behave in a perfectly uniform manner; some WebDriver implementations have bugs and some just have oddities which are unique to them. A real (albeit now-outdated) example is that WebDriver for Apple Safari v11 could not change the selection of an HTML <select> element. When faced with that bug, the only course of action a developer could take was to work around it. How the 'quirks' architecture can help Developers do not want to litter their WebDriver-consuming code with browser detection logic. Just like in regular web development, browser detection is bad, feature detection is better. What the quirks architecture provides is an additional interface, added to WebDrivers created by the universal WebDriver factory: IHasQuirks. WebDrivers which implement IHasQuirks can cross-reference their browser identification with source data listing which browsers are affected by which quirks. The result is the AllQuirks property and the following extension methods (for convenience): HasQuirk(string) GetQuirks() GetFirstApplicableQuirk(params string［］) The quirks source data Quirks source data may come from two sources. To use quirks at least one source must be activated and it is recommended to enable both. Hard-coded into an application/library Supplementary configuration data The intent is that an application or library may ship with quirks information that is known at the time of writing. This information may be supplemented or (in part or wholly) overwritten by quirks information provided by the consumer. This allows consuming logic to react to changes in browser quirks (as time moves on) by adding their own quirks configuration and not needing to wait for an upstream app/library to release an updated version with new quirks source data. This library uses a simple merging algorithm to combine the hard-coded and options data-sources. Where the two sources list quirks that the other source does not, the resultant data will contain both quirks. Where the two sources list the same quirk, the Options data will win the disagreement, so to speak, and will shadow the hard-coded data. Developers may use this technique to update the affected browsers for a quirk or even to (effectively) remove it, by giving it an empty set of affected browsers. Setting up quirks functionality To configure the source data you must activate it in source control. In the following example, quirksData represents data which would be hard-coded into your application/library (design-time). services.AddWebDriverQuirks(quirksData); The AddWebDriverQuirks method is customisable with a number of parameters, most of which are not shown above. By default any quirks data specified in the app Configuration, via the Options Pattern, will be used to supplement and/or override that hard-coded data. The default configuration path for quirks data is WebDriverQuirks. Lastly, to use quirks functionality it must also be activated in the WebDriverCreationOptions, via the AddBrowserQuirks property. A note on proxies Be aware that when the WebDriver quirks functionality is activated, the WebDriver returned by the universal factory will be a proxy object and not the original concrete WebDriver implementation. In best-practice scenarios where the WebDriver is utilised only by its interfaces this should make no difference. More information is available at the linked documentation above."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Universal WebDriver factory | CSF.Extensions.WebDriver",
    "keywords": "Universal WebDriver factory A common requirement when performing browser testing is to conduct tests using a variety of browsers. This helps ensure that app functionality is not reliant upon a particular browser feature or quirk and it's truly cross-browser compatible. The universal WebDriver factory is a configuration-driven mechanism by which WebDriver instances may be constructed. It is based upon Microsoft Dependency Injection and optionally the Options Pattern and Configuration. The WebDriver factory is the mechanism by which other functionality in this library is activated. To begin using it, follow the three steps below. 1. Add the factory to dependency injection It is recommended to use AddWebDriverFactory with your dependency injection configuration. This enables the Microsoft Options Pattern and Configuration for the WebDriver factory. You may alternatively use AddWebDriverFactoryWithoutOptionsPattern if you do not with to use those technologies, although some features will be unavailable to you if you choose this. services.AddConfiguration(); services.AddWebDriverFactory(); There are overloads of AddWebDriverFactory available to: Specify a non-default configuration path for the WebDriver factory options; the default is WebDriverFactory Specify a configuration section from which to build the WebDriver factory options Specify an additional configuration callback to provide extra options outside the configuration system Read the documentation for these functions (linked above) for more info. 2. Include configuration for one or more WebDrivers This configuration should be written using whichever configuration mechanism you wish to use. Here is an example using the common appsettings.json format: { \"WebDriverFactory\": { \"DriverConfigurations\": { \"MyRemoteSafari\": { \"DriverType\": \"RemoteWebDriver\", \"OptionsType\": \"SafariOptions\", \"GridUrl\": \"https://gridurl.example.com/url-path\" }, \"MyLocalChrome\": { \"DriverType\": \"ChromeDriver\" } }, \"SelectedConfiguration\": \"MyLocalChrome\" } } You may set one of your configurations to be 'the selected default' if you wish, enabling you to use GetDefaultWebDriver(). Do not forget that you may provide configuration from multiple sources; for example you may specify your available driver configurations in a JSON file but specify the default selected one via a command-line parameter such as: --WebDriverFactory::SelectedConfiguration MyConfigurationName Tip Do not store secrets such as passwords in your configuration. The methods of IGetsWebDriver and ICreatesWebDriverFromOptions provide parameters whereby secrets may be injected into the DriverOptions from external sources, such as environment variables. This avoids the need to add secrets to source-controlled files. 3. Inject and use the services Use dependency injection to inject an IGetsWebDriver. Use this service to get WebDriver instances. IGetsWebDriver is unavailable if you used AddWebDriverFactoryWithoutOptionsPattern when setting this functionality up. In that case you must use ICreatesWebDriverFromOptions instead. This service offers the same functionality except that the consumer is responsible for specifying the WebDriverCreationOptions; they are not retrieved from Options."
  },
  "index.html": {
    "href": "index.html",
    "title": "CSF.Extensions.WebDriver | CSF.Extensions.WebDriver",
    "keywords": "CSF.Extensions.WebDriver This project offers some support functionality for Selenium WebDriver. This is broadly organised into three features: A universal WebDriver factory intended to help keep WebDriver configuration and construction out of your application/tests A mechanism to reliably identify WebDriver instances and their version information, after they are created A mechanism to 'mark WebDrivers up' with information about their quirks which affect that browser/WebDriver/version combination"
  }
}